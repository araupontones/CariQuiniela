left_join(select(tablita,-c(year), -Home), by= c("team","date")) %>%
left_join(select(tablita,
-starts_with('pre'),
-year,
-GF,
-GA,
-Home,
-qatar,
-dr_pre
), by = c("opponent"= "team", "date"), suffix = c("_team", "_opponent")) %>%
arrange(team, desc(date))
names(roys)
#get roys
roys <- all_matches %>%
filter(year > 2017) %>%
select(date,team) %>%
left_join(select(tablita,-c(year), -Home), by= c("team","date")) %>%
left_join(select(tablita,
-starts_with('pre'),
-starts_with('post'),
-year,
-GF,
-GA,
-Home,
-qatar,
-dr_pre
), by = c("opponent"= "team", "date"), suffix = c("_team", "_opponent")) %>%
arrange(team, desc(date))
names(roys)
View(elo)
View(tablita)
#get roys ------------------------------------------------------------------
roys <- all_matches %>%
filter(year > 2017) %>%
select(date,team) %>%
left_join(select(tablita,-c(year), -Home), by= c("team","date")) %>%
left_join(select(tablita,
-starts_with('pre'),
-starts_with('post'),
-year,
-GF,
-GA,
-Home,
-qatar,
-dr_pre,
-Opponent,
), by = c("opponent"= "team", "date"), suffix = c("_team", "_opponent")) %>%
arrange(team, desc(date))
#get roys ------------------------------------------------------------------
roys <- all_matches %>%
filter(year > 2017) %>%
select(date,team) %>%
left_join(select(tablita,-c(year), -Home), by= c("team","date")) %>%
left_join(select(tablita,
-starts_with('pre'),
-starts_with('post'),
-year,
-GF,
-GA,
-Home,
-qatar,
-dr_pre,
-opponent,
), by = c("opponent"= "team", "date"), suffix = c("_team", "_opponent")) %>%
arrange(team, desc(date))
names(roys)
#get roys ------------------------------------------------------------------
roys <- all_matches %>%
filter(year > 2017) %>%
select(date,team) %>%
left_join(select(tablita,-c(year), -Home, -starts_with("post")), by= c("team","date")) %>%
left_join(select(tablita,
-starts_with('pre'),
-starts_with('post'),
-year,
-GF,
-GA,
-Home,
-qatar,
-dr_pre,
-opponent,
), by = c("opponent"= "team", "date"), suffix = c("_team", "_opponent")) %>%
arrange(team, desc(date))
names(roys)
exfile
exfile
rio::export(roys, exfile)
exfile = 'tablita/tablita_gordo.csv'
exfile_ols = 'tablita/tablita_ols.csv'
#Read elo ratings that is created in elo/append_ratings.R
elo <- rio::import("elo/elo_rankings.csv") %>% mutate(qatar = FALSE)
library(dplyr)
exfile = 'tablita/tablita_gordo.csv'
exfile_ols = 'tablita/tablita_ols.csv'
#Read elo ratings that is created in elo/append_ratings.R
elo <- rio::import("elo/elo_rankings.csv") %>% mutate(qatar = FALSE)
#Bring oponentes into the teams colum ==========================================
# I am doing this so each time has its unique history of GF and GA
oponentes <- all_matches
#bind tables ===================================================================
all_matches <- plyr::rbind.fill(elo, wc_matches)
library(zoo)
library(dplyr)
library(stringr)
library(dplyr)
exfile = 'tablita/tablita_gordo.csv'
exfile_ols = 'tablita/tablita_ols.csv'
# read data =====================================================================
#Read elo ratings that is created in elo/append_ratings.R
elo <- rio::import("elo/elo_rankings.csv") %>% mutate(qatar = FALSE)
#read all matches created by walle
wc_matches <- rio::import("https://raw.githubusercontent.com/araupontones/CariQuiniela/walle/data/3.clean/ind_all_matches.csv")
#make wv tables compatible with elo in terms of names
wc_matches <- filter(wc_matches, qatar) %>%
rename(date = Date,
opponent = Opponent,
goles_team = goles_local,
goles_opponent = goles_visitante
) %>%
mutate(torneo = "World Cup" )
#bind tables ===================================================================
all_matches <- plyr::rbind.fill(elo, wc_matches)
#Bring oponentes into the teams colum ==========================================
# I am doing this so each time has its unique history of GF and GA
oponentes <- all_matches
names(oponentes) <- c("date", "year",
"opponent", "team",
"goles_opponent", "goles_team",
"torneo", "sede",
"rating_change_opponent", "rating_change_team",
"rating_opponent", "rating_team",
"rank_change_opponent", "rank_change_team",
"rank_opponent", "rank_team", "qatar"
)
matches <- rbind(all_matches, oponentes)
library(zoo)
library(dplyr)
library(stringr)
library(dplyr)
exfile = 'tablita/tablita_gordo.csv'
exfile_ols = 'tablita/tablita_ols.csv'
# read data =====================================================================
#Read elo ratings that is created in elo/append_ratings.R
elo <- rio::import("elo/elo_rankings.csv") %>% mutate(qatar = FALSE)
#read all matches created by walle
wc_matches <- rio::import("https://raw.githubusercontent.com/araupontones/CariQuiniela/walle/data/3.clean/ind_all_matches.csv")
#make wv tables compatible with elo in terms of names
wc_matches <- filter(wc_matches, qatar) %>%
rename(date = Date,
opponent = Opponent,
goles_team = goles_local,
goles_opponent = goles_visitante
) %>%
mutate(torneo = "World Cup" )
#bind tables ===================================================================
all_matches <- plyr::rbind.fill(elo, wc_matches)
#Bring oponentes into the teams colum ==========================================
# I am doing this so each time has its unique history of GF and GA
oponentes <- all_matches
names(oponentes) <- c("date", "year",
"opponent", "team",
"goles_opponent", "goles_team",
"torneo", "sede",
"rating_change_opponent", "rating_change_team",
"rating_opponent", "rating_team",
"rank_change_opponent", "rank_change_team",
"rank_opponent", "rank_team", "qatar"
)
matches <- rbind(all_matches, oponentes)
# Create indicators ===========================================================
#funciton to sum criterias
suma_rol <- function(criteria){zoo::rollsum(criteria,5, align = 'left', fill = NA)}
tablita <- matches %>%
#rename variables to ease its analysis
rename(GF = goles_team,
GA = goles_opponent,
post_rating_team = rating_team,
post_rating_opponent = rating_opponent
) %>%
#create indicators by team
group_by(team) %>%
arrange(team, desc(year),desc(date)) %>%
mutate(
ind_did_score = suma_rol(GF>0),
ind_fail_to_score = suma_rol(GF==0),
ind_did_receive_goal = suma_rol(GA>0),
ind_not_receive_goal = suma_rol(GA==0),
ind_GF_last_5 = rollsum(GF, 5,align = 'left', fill = NA),
ind_GA_last_5 = rollsum(GA, 5,align = 'left', fill = NA),
ind_rating_team = post_rating_team,
ind_rating_opponent = post_rating_opponent,
#so take the ones before the match
across(starts_with("ind"), ~lead(.x)),
Home = str_detect(sede, team),
Home = ifelse(is.na(Home), FALSE, Home),
#rating_difference
# #calculate rantings
# tournament_type = case_when(torneo == "World Cup" ~ "WC_finals"
#                             torneo %in% c("African Nations Cup",
#                                           "Arab Nations Cup",
#                                           "CONCACAF Championship",
#
#
#                                           )
#
#                             ),
.after = GA ) %>%
ungroup()%>%
select(date, year, team, opponent,GF,GA, Home, starts_with("ind"), starts_with("post"), qatar) %>%
rename(pre_rating_team = ind_rating_team,
pre_rating_opponent = ind_rating_opponent) %>%
rename_at(vars(starts_with("ind_")), function(x)str_remove_all(x,"ind_")) %>%
#ratings difference
mutate(dr_pre = ifelse(Home, pre_rating_team - pre_rating_opponent + 100, pre_rating_team - pre_rating_opponent)) %>%
filter(year > 2017)
#create table for OLS ==========================================================
opponents <- tablita %>%
select(team, date, GA_last_5, not_receive_goal)
tablita_final <- tablita %>%
left_join(opponents, by = c("opponent" = "team", "date"), suffix = c("_team", "_opponent"))
#Create table for roy ==========================================================
roys <- all_matches %>%
filter(year > 2017) %>%
select(date,team) %>%
#get indicators of team
left_join(select(tablita,-c(year), -Home, -starts_with("post")), by= c("team","date")) %>%
#get indicators of opponent & dropping duplicated variables
left_join(select(tablita,
-c(starts_with('pre'),
starts_with('post'),
year,
GF,
GA,
Home,
qatar,
dr_pre,
opponent)
), by = c("opponent"= "team", "date"), suffix = c("_team", "_opponent")) %>%
arrange(team, desc(date))
rio::export(roys, exfile)
rio::export(tablita_final, exfile_ols)
#matches <- import("https://raw.githubusercontent.com/araupontones/CariQuiniela/main/tablita/tablita_gordo.csv")
matches <- import('tablita/tablita_ols.csv.csv')
library(rio)
library(dplyr)
library(stringr)
library(jtools)
library(ggplot2)
#matches <- import("https://raw.githubusercontent.com/araupontones/CariQuiniela/main/tablita/tablita_gordo.csv")
matches <- import('tablita/tablita_ols.csv.csv')
#matches <- import("https://raw.githubusercontent.com/araupontones/CariQuiniela/main/tablita/tablita_gordo.csv")
matches <- import('tablita/tablita_ols.csv')
#Model ---------------------------------------------------------------------
linearMod <- lm(GF ~
#performance team
# pre_rating_team +
#  pre_rating_opponent
GF_last_5
+ GA_last_5_team
#   + pre_rating_team
# + pre_rating_opponent
+GA_last_5_opponent
+dr_pre
#efectividad_local
+ GF_last_5
#performance Opponent
,
data=matches)
#inspect model
summary(linearMod)
predicted_data <- matches %>% filter(is.na(GF))
predicted_data$GF <- predict(linearMod, newdata = predicted_data)
View(predicted_data)
goals_against <- predicted_data
predicted_data$GF <- predict(linearMod, newdata = predicted_data) %>%
select(date, team, opponent, GF)
predicted_data$GF <- predict(linearMod, newdata = predicted_data) %>%
select(date)
final <- predicted_data %>%
select(date, team, opponent, GF)
View(final)
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF),by("date", "team") ))
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF),by("date", "team")))
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF)))
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF))) %>%
filter(!is.na(GF))
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF))) %>%
filter(!is.na(GF)) %>%
filter(date == "2022-11-22")
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF))) %>%
rowwise() %>%
mutate(id = paste(sort(c(id_team, id_opponent)), date, collapse =  "-"))
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF))) %>%
rowwise() %>%
mutate(id = paste(sort(c(id_team, id_opponent)), collapse =  "-"))
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF))) %>%
rowwise() %>%
mutate(id = paste(sort(c(team, opponent)), collapse =  "-"))
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF))) %>%
rowwise() %>%
mutate(id = paste(sort(c(team, opponent)),date, collapse =  "-"))
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF))) %>%
rowwise() %>%
mutate(id = paste0(date,paste(sort(c(team, opponent)), collapse =  "-")))
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF))) %>%
rowwise() %>%
mutate(id = paste0(date,paste(sort(c(team, opponent)), collapse =  "-"))) %>%
ungroup()
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF))) %>%
rowwise() %>%
mutate(id = paste0(date,paste(sort(c(team, opponent)), collapse =  "-"))) %>%
ungroup() %>%
filter(!is.na(GA)) %>%
filter(date == "2022-11-22")
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF))) %>%
rowwise() %>%
mutate(id = paste0(date,paste(sort(c(team, opponent)), collapse =  "-"))) %>%
ungroup() %>%
filter(!is.na(GA)) %>%
group_by(id) %>%
slice(1) %>%
ungroup()%>%
filter(date == "2022-11-22")
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF))) %>%
rowwise() %>%
mutate(id = paste0(date,paste(sort(c(team, opponent)), collapse =  "-"))) %>%
ungroup() %>%
filter(!is.na(GA)) %>%
group_by(id) %>%
slice(1) %>%
ungroup()%>%
filter(date == "2022-11-23")
#Model ---------------------------------------------------------------------
linearMod <- lm(GF ~
#performance team
# pre_rating_team +
#  pre_rating_opponent
#GF_last_5
#+ GA_last_5_team
#   + pre_rating_team
# + pre_rating_opponent
#+GA_last_5_opponent
+dr_pre
#efectividad_local
+ GF_last_5
+ not_receive_goal_opponent
#performance Opponent
,
data=matches)
#inspect model
summary(linearMod)
predicted_data <- matches %>% filter(is.na(GF))
predicted_data$GF <- predict(linearMod, newdata = predicted_data)
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF))) %>%
rowwise() %>%
mutate(id = paste0(date,paste(sort(c(team, opponent)), collapse =  "-"))) %>%
ungroup() %>%
filter(!is.na(GA)) %>%
group_by(id) %>%
slice(1) %>%
ungroup()%>%
filter(date == "2022-11-23")
#Model ---------------------------------------------------------------------
linearMod <- lm(GF ~
#performance team
# pre_rating_team +
#  pre_rating_opponent
GF_last_5
+ GA_last_5_team
#   + pre_rating_team
# + pre_rating_opponent
+GA_last_5_opponent
+dr_pre
#efectividad_local
+ GF_last_5
#performance Opponent
,
data=matches)
predicted_data <- matches %>% filter(is.na(GF))
predicted_data$GF <- predict(linearMod, newdata = predicted_data)
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF))) %>%
rowwise() %>%
mutate(id = paste0(date,paste(sort(c(team, opponent)), collapse =  "-"))) %>%
ungroup() %>%
filter(!is.na(GA)) %>%
group_by(id) %>%
slice(1) %>%
ungroup()%>%
filter(date == "2022-11-23")
library(rio)
library(dplyr)
library(stringr)
library(jtools)
library(ggplot2)
#matches <- import("https://raw.githubusercontent.com/araupontones/CariQuiniela/main/tablita/tablita_gordo.csv")
matches <- import('tablita/tablita_ols.csv')
matches <- matches %>%
mutate(qatar =ifelse(is.na(qatar), FALSE, qatar),
GF = ifelse(qatar, NA, GF))
#Model ---------------------------------------------------------------------
linearMod <- lm(GF ~
#performance team
# pre_rating_team +
#  pre_rating_opponent
GF_last_5
+ GA_last_5_team
#   + pre_rating_team
# + pre_rating_opponent
+GA_last_5_opponent
+dr_pre
#efectividad_local
+ GF_last_5
#performance Opponent
,
data=matches)
#inspect model
summary(linearMod)
predicted_data <- matches %>% filter(is.na(GF))
predicted_data$GF <- predict(linearMod, newdata = predicted_data)
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF))) %>%
rowwise() %>%
mutate(id = paste0(date,paste(sort(c(team, opponent)), collapse =  "-"))) %>%
ungroup() %>%
filter(!is.na(GA)) %>%
group_by(id) %>%
slice(1) %>%
ungroup()%>%
filter(date == "2022-11-23")
names(matches)
#Model ---------------------------------------------------------------------
linearMod <- lm(GF ~
#performance team
# pre_rating_team +
#  pre_rating_opponent
+ GF_last_5
#   + pre_rating_team
# + pre_rating_opponent
+GA_last_5_opponent
+dr_pre
#efectividad_local
#performance Opponent
,
data=matches)
#inspect model
summary(linearMod)
predicted_data <- matches %>% filter(is.na(GF))
predicted_data$GF <- predict(linearMod, newdata = predicted_data)
final <- predicted_data %>%
select(date, team, opponent, GF) %>%
left_join(select(predicted_data, c(date, team = opponent, GA = GF))) %>%
rowwise() %>%
mutate(id = paste0(date,paste(sort(c(team, opponent)), collapse =  "-"))) %>%
ungroup() %>%
filter(!is.na(GA)) %>%
group_by(id) %>%
slice(1) %>%
ungroup()%>%
filter(date == "2022-11-23")
View(roys)
sum(is.na(roys[["team"]]))
vars <- names(roys)
lapply(vars, function(x){
message(x)
sum(is.na(roys[[x]]))
})
lapply(vars, function(x){
message(x)
print(sum(is.na(roys[[x]])))
})
roys2 <- roys %>% filter(!qatar)
vars <- names(roys)
roys2 <- roys %>% filter(!qatar)
lapply(vars, function(x){
message(x)
print(sum(is.na(roys2[[x]])))
})
roys2 <- roys %>% filter(!qatar) %>% filter(is.na(did_score_team))
View(roys2)
