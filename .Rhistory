library(rvest)
library(tibble)
library(tidyr)
#define working directory so linux can run with no problem
sistema <- Sys.info()['sysname']
get_proj_dir <- function(){
if(sistema == "Windows"){
my_dir <- getwd()
} else {
my_dir = "/home/rstudio/CariQuniela"
}
}
dir_data <- file.path(get_proj_dir(), "data")
dir_r <- file.path(get_proj_dir(), "R_")
#look up table to clean countries
look_up <- import(file.path(dir_data,"1.lookups/teams_urls.csv") %>% select(team, id))
#look up table to clean countries
look_up <- import(file.path(dir_data,"1.lookups/teams_urls.csv")) %>% select(team, id)
#clean and create indicators
library(dplyr)
library(tidyr)
library(rio)
library(stringr)
library(janitor)
message("Cleaning matches played  before WC.....")
indir <- file.path(dir_data,"2.scrapped/fbref")
infile_all <- file.path(indir,"matches_before_2022.csv") #from R_scrap_games_before_WC.R
infile_all <- file.path(indir,"matches_before_2022.csv") #from R_scrap_games_before_2022.R
infile_2022 <-  file.path(indir,"matches_2022_before_WC.csv") #from R_/2.scrap_games_2022_before_WC.R
infile_before_2022 <- file.path(indir,"matches_before_2022.csv") #from R_scrap_games_before_2022.R
infile_2022 <-  file.path(indir,"matches_2022_before_WC.csv") #from R_/2.scrap_games_2022_before_WC.R
look_up <- import(file.path(dir_data,"1.lookups/teams_urls.csv")) %>% select(team, id)
#Exit paths ---------------------------------------------------------------------
exdir <- file.path(dir_data,"2.1.intermediate")
look_up <- import(file.path(dir_data,"1.lookups/teams_urls.csv")) %>% select(team, id)
#Exit paths ---------------------------------------------------------------------
exdir <- file.path(dir_data,"2.1.intermediate")
exfile <- file.path(exdir, "matches_before_WC.rds")
#Exit paths ---------------------------------------------------------------------
exdir <- file.path(dir_data,"2.1.intermediate")
exfile <- file.path(exdir, "matches_before_WC.rds")
#read scrapped data ----------------------------------------------------------
before_2022 <- import(infile_before_2022) %>% mutate(qatar = FALSE)  %>% filter(GF != "", !is.na(Date))
during_2022<- import(infile_2022)
#read scrapped data ----------------------------------------------------------
before_2022 <- import(infile_before_2022) %>% mutate(qatar = FALSE)  %>% filter(GF != "", !is.na(Date))
during_2022<- import(infile_2022)
#Clean table of all matches & define year variable ---------------------------
db_matches <- before_2022 %>%
#bind with matches of 2022 previous WC
plyr::rbind.fill(during_2022) %>%
#drop penalties in drawn matches, penalties are reported within parenthesis.
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4),
#remove iso2 and iso 3 from Opponent's name
Opponent = str_remove(Opponent, "^[a-z][a-z] "),
Opponent = str_remove(Opponent, "^[a-z][a-z][a-z] ")
) %>%
select(year, team, Opponent, Date, Comp, Venue, Result, GF, GA, qatar) %>%
#remove duplicates (there were some duplicated matches while scrapping)
distinct() %>%
#id match
create_ids(., look_up) %>%
ungroup() %>%
#join with world cup matches
rbind(wc$by_team)
gmdacr::load_functions("functions")
#Clean table of all matches & define year variable ---------------------------
db_matches <- before_2022 %>%
#bind with matches of 2022 previous WC
plyr::rbind.fill(during_2022) %>%
#drop penalties in drawn matches, penalties are reported within parenthesis.
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4),
#remove iso2 and iso 3 from Opponent's name
Opponent = str_remove(Opponent, "^[a-z][a-z] "),
Opponent = str_remove(Opponent, "^[a-z][a-z][a-z] ")
) %>%
select(year, team, Opponent, Date, Comp, Venue, Result, GF, GA, qatar) %>%
#remove duplicates (there were some duplicated matches while scrapping)
distinct() %>%
#id match
create_ids(., look_up) %>%
ungroup() %>%
#join with world cup matches
rbind(wc$by_team)
#Clean table of all matches & define year variable ---------------------------
db_matches <- before_2022 %>%
#bind with matches of 2022 previous WC
plyr::rbind.fill(during_2022) %>%
#drop penalties in drawn matches, penalties are reported within parenthesis.
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4),
#remove iso2 and iso 3 from Opponent's name
Opponent = str_remove(Opponent, "^[a-z][a-z] "),
Opponent = str_remove(Opponent, "^[a-z][a-z][a-z] ")
) %>%
select(year, team, Opponent, Date, Comp, Venue, Result, GF, GA, qatar) %>%
#remove duplicates (there were some duplicated matches while scrapping)
distinct() %>%
#id match
create_ids(., look_up) %>%
ungroup()
names(db_matches)
sum(db_matches$Date)
sum(is.na(db_matches$Date))
#transform matches as local vs visitante format ------------------------------
#this is the data to be exported
db_matches_unique <- db_matches %>%
filter(!qatar) %>%
group_by(id_match) %>%
arrange(id_match) %>%
mutate(Venue = ifelse(is.na(id_opponent) & Venue == "Away", "awayNoWC", Venue)) %>%
#only keep home and neutral matches to capture goles local and goles visitante
filter(Venue %in% c("Home", "Neutral", "awayNoWC")) %>%
slice(1) %>%
#correct for teams that are not going to the WC
mutate(bucket = team,
team = ifelse(Venue == "awayNoWC", Opponent, team),
Opponent = ifelse(Venue == "awayNoWC", bucket, Opponent),
goles_local = case_when(Venue == "awayNoWC" ~ GA,
T ~ GF),
goles_visitante = case_when(Venue == "awayNoWC" ~ GF,
T ~ GA),
neutral = Venue == "Neutral",
.after = "GA"
) %>%
select(-bucket) %>%
ungroup() %>%
select(-c(Venue, Result, GF, GA, starts_with("id_"))) %>%
arrange(desc(Date))  %>%
select(year, team, Opponent, Date, goles_local, goles_visitante, qatar) %>%
rbind(wc$scores)
#transform matches as local vs visitante format ------------------------------
#this is the data to be exported
db_matches_unique <- db_matches %>%
filter(!qatar) %>%
group_by(id_match) %>%
arrange(id_match) %>%
mutate(Venue = ifelse(is.na(id_opponent) & Venue == "Away", "awayNoWC", Venue)) %>%
#only keep home and neutral matches to capture goles local and goles visitante
filter(Venue %in% c("Home", "Neutral", "awayNoWC")) %>%
slice(1) %>%
#correct for teams that are not going to the WC
mutate(bucket = team,
team = ifelse(Venue == "awayNoWC", Opponent, team),
Opponent = ifelse(Venue == "awayNoWC", bucket, Opponent),
goles_local = case_when(Venue == "awayNoWC" ~ GA,
T ~ GF),
goles_visitante = case_when(Venue == "awayNoWC" ~ GF,
T ~ GA),
neutral = Venue == "Neutral",
.after = "GA"
) %>%
select(-bucket) %>%
ungroup() %>%
select(-c(Venue, Result, GF, GA, starts_with("id_"))) %>%
arrange(desc(Date))  %>%
select(year, team, Opponent, Date, goles_local, goles_visitante, qatar)
View(db_matches_unique)
#transform matches as local vs visitante format ------------------------------
#this is the data to be exported
db_matches_unique <- db_matches %>%
filter(!qatar) %>%
group_by(id_match) %>%
arrange(id_match) %>%
mutate(Venue = ifelse(is.na(id_opponent) & Venue == "Away", "awayNoWC", Venue)) %>%
#only keep home and neutral matches to capture goles local and goles visitante
filter(Venue %in% c("Home", "Neutral", "awayNoWC")) %>%
slice(1) %>%
#correct for teams that are not going to the WC
mutate(bucket = team,
team = ifelse(Venue == "awayNoWC", Opponent, team),
Opponent = ifelse(Venue == "awayNoWC", bucket, Opponent),
goles_local = case_when(Venue == "awayNoWC" ~ GA,
T ~ GF),
goles_visitante = case_when(Venue == "awayNoWC" ~ GF,
T ~ GA),
neutral = Venue == "Neutral",
.after = "GA"
) %>%
select(-bucket) %>%
ungroup() %>%
select(-c(Venue, Result, GF, GA, starts_with("id_"))) %>%
arrange(desc(Date))  %>%
select(year, team, Opponent, Date, goles_local, goles_visitante, qatar)
pre_cup_matches <- list(db_matches_unique, db_matches)
names(pre_cup_matches) <- c("scores", "by_team")
export(pre_cup_matches, exfile)
exfile <- file.path(dir_data, "2.1.intermediate/WC_matches.rds")
#to request scores of WC. Clean on day 1 of tournament
look_up <- import(file.path(dir_data,"1.lookups/teams_urls.csv")) %>% select(team, id)
exfile <- file.path(dir_data, "2.1.intermediate/WC_matches.rds")
scores <- "https://api.the-odds-api.com/v4/sports/soccer_fifa_world_cup/scores/?daysFrom=1&apiKey=324654c6d22a577030fead8bed15fc9d"
sc <- GET(scores)
r_s <- content(sc)
transforma <- lapply(r_s, function(m){
match_data <-tibble(team = m$home_team,
Opponent = m$away_team,
Date = stringr::str_sub(m$commence_time, 1,10),
Venue = "Neutral",
qatar = TRUE)
#if the match has not been completed
if(!m$completed){
match_data$goles_local = NA
match_data$goles_visitante = NA
} else {
match_data$goles_local = m$scores[[1]]$score
match_data$goles_visitante = m$scores[[2]]$score
}
return(match_data)
})
#unique matches in format local visitante
scores_matches <- do.call(rbind, transforma) %>%
clean_teams() %>%
mutate(across(starts_with("goles"), function(x)as.numeric(x)),
year = stringr::str_sub(Date, 1,4)) %>%
select(year, team, Opponent, Date, goles_local, goles_visitante, qatar)
#create table to get GF and GA for all teams-------------------------------------
#start with local teams
#locales
locals <- scores_matches %>%
mutate(GF = goles_local,
GA = goles_visitante,
Result = case_when(is.na(goles_local) ~ NA_character_,
GF > GA ~ "W",
GF < GA ~ "L",
GF == GA ~ "D"
)
)
#visitantes -----------------------------------------------------------------
visitantes <- scores_matches %>%
mutate(bucket = Opponent,
Opponent = team,
team = bucket,
GF = goles_visitante,
GA = goles_local,
Result = case_when(is.na(goles_local) ~ NA_character_,
GF > GA ~ "W",
GF < GA ~ "L",
GF == GA ~ "D"
)
) %>%
select(-bucket)
#matches by team -------------------------------------------------------------
matches_by_team <- rbind(locals, visitantes) %>%
mutate(Comp = "WC",
Venue = "Neutral"
) %>%
select(-starts_with("goles")) %>%
create_ids(., look_up)
world_cup_matches <- list(scores_matches, matches_by_team)
names(world_cup_matches) <- c("scores", "by_team")
export(world_cup_matches, exfile)
pre_wc <- import(dir_data, "2.1.intermediate/matches_before_WC.rds")
pre_wc <- import(file.path(dir_data, "2.1.intermediate/matches_before_WC.rds"))
pre_wc <- import(file.path(dir_data, "2.1.intermediate/matches_before_WC.rds"))
wc <-  import(file.path(dir_data, "2.1.intermediate/matches_before_WC.rds"))
ref <- import(file.path(dir_data, "3.clean/ind_all_matches.csv"))
names(ref)
#Create ind_all_matches.csv
names(pre_wc$scores)
names(wc$scores)
#Create ind_all_matches.csv
all_matches <- pre_wc$scores %>%
rbind(wc$scores)
View(all_matches)
wc <-  import(file.path(dir_data, "2.1.intermediate/WC_matches.rds"))
#Create ind_all_matches.csv
all_matches <- pre_wc$scores %>%
rbind(wc$scores)
View(all_matches)
#Create ind_all_matches.csv
all_matches <-  rbind(wc$scores) %>% pre_wc$scores
#Create ind_all_matches.csv
all_matches <-  rbind(wc$scores, pre_wc$scores )
View(all_matches)
#Create ind_all_matches.csv
all_matches <-  rbind(wc$scores, pre_wc$scores ) %>% arrange(desc(Date))
View(all_matches)
#Create ind_all_matches.csv
all_matches <-  rbind(wc$scores, pre_wc$scores ) %>% arrange(desc(Date)) %>% mutate(Date = as.Date(Date))
View(pre_wc$scores)
class(pre_wc$scores$Date)
class(wc$scores$Date)
#transform matches as local vs visitante format ------------------------------
#this is the data to be exported
db_matches_unique <- db_matches %>%
filter(!qatar) %>%
group_by(id_match) %>%
arrange(id_match) %>%
mutate(Venue = ifelse(is.na(id_opponent) & Venue == "Away", "awayNoWC", Venue)) %>%
#only keep home and neutral matches to capture goles local and goles visitante
filter(Venue %in% c("Home", "Neutral", "awayNoWC")) %>%
slice(1) %>%
#correct for teams that are not going to the WC
mutate(bucket = team,
team = ifelse(Venue == "awayNoWC", Opponent, team),
Opponent = ifelse(Venue == "awayNoWC", bucket, Opponent),
goles_local = case_when(Venue == "awayNoWC" ~ GA,
T ~ GF),
goles_visitante = case_when(Venue == "awayNoWC" ~ GF,
T ~ GA),
neutral = Venue == "Neutral",
.after = "GA"
) %>%
select(-bucket) %>%
ungroup() %>%
select(-c(Venue, Result, GF, GA, starts_with("id_"))) %>%
arrange(desc(Date))  %>%
select(year, team, Opponent, Date, goles_local, goles_visitante, qatar) %>%
mutate(Date = as.character(Date))
#clean and create indicators
library(dplyr)
library(tidyr)
library(rio)
library(stringr)
library(janitor)
#clean_all_matches_before_WC.R
message("Cleaning matches played  before WC.....")
indir <- file.path(dir_data,"2.scrapped/fbref")
#all_competitions.csv is created in R_/scrap_games_teams.R
infile_before_2022 <- file.path(indir,"matches_before_2022.csv") #from R_scrap_games_before_2022.R
infile_2022 <-  file.path(indir,"matches_2022_before_WC.csv") #from R_/2.scrap_games_2022_before_WC.R
look_up <- import(file.path(dir_data,"1.lookups/teams_urls.csv")) %>% select(team, id)
#Exit paths ---------------------------------------------------------------------
exdir <- file.path(dir_data,"2.1.intermediate")
exfile <- file.path(exdir, "matches_before_WC.rds")
#read scrapped data ----------------------------------------------------------
before_2022 <- import(infile_before_2022) %>% mutate(qatar = FALSE)  %>% filter(GF != "", !is.na(Date))
during_2022<- import(infile_2022)
#Clean table of all matches & define year variable ---------------------------
db_matches <- before_2022 %>%
#bind with matches of 2022 previous WC
plyr::rbind.fill(during_2022) %>%
#drop penalties in drawn matches, penalties are reported within parenthesis.
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4),
#remove iso2 and iso 3 from Opponent's name
Opponent = str_remove(Opponent, "^[a-z][a-z] "),
Opponent = str_remove(Opponent, "^[a-z][a-z][a-z] ")
) %>%
select(year, team, Opponent, Date, Comp, Venue, Result, GF, GA, qatar) %>%
#remove duplicates (there were some duplicated matches while scrapping)
distinct() %>%
#id match
create_ids(., look_up) %>%
ungroup()
#transform matches as local vs visitante format ------------------------------
#this is the data to be exported
db_matches_unique <- db_matches %>%
filter(!qatar) %>%
group_by(id_match) %>%
arrange(id_match) %>%
mutate(Venue = ifelse(is.na(id_opponent) & Venue == "Away", "awayNoWC", Venue)) %>%
#only keep home and neutral matches to capture goles local and goles visitante
filter(Venue %in% c("Home", "Neutral", "awayNoWC")) %>%
slice(1) %>%
#correct for teams that are not going to the WC
mutate(bucket = team,
team = ifelse(Venue == "awayNoWC", Opponent, team),
Opponent = ifelse(Venue == "awayNoWC", bucket, Opponent),
goles_local = case_when(Venue == "awayNoWC" ~ GA,
T ~ GF),
goles_visitante = case_when(Venue == "awayNoWC" ~ GF,
T ~ GA),
neutral = Venue == "Neutral",
.after = "GA"
) %>%
select(-bucket) %>%
ungroup() %>%
select(-c(Venue, Result, GF, GA, starts_with("id_"))) %>%
arrange(desc(Date))  %>%
select(year, team, Opponent, Date, goles_local, goles_visitante, qatar) %>%
mutate(Date = as.character(Date))
pre_cup_matches <- list(db_matches_unique, db_matches)
names(pre_cup_matches) <- c("scores", "by_team")
export(pre_cup_matches, exfile)
pre_wc <- import(file.path(dir_data, "2.1.intermediate/matches_before_WC.rds"))
wc <-  import(file.path(dir_data, "2.1.intermediate/WC_matches.rds"))
ref <- import(file.path(dir_data, "3.clean/ind_all_matches.csv"))
names(ref)
class(pre_wc$scores$Date)
class(wc$scores$Date)
#Create ind_all_matches.csv
all_matches <-  rbind(wc$scores, pre_wc$scores ) %>% mutate(Date = as.Date(Date)) %>% arrange(desc(Date))
exfile_matches <- file.path(dir_data, "3.clean/ind_all_matches.csv")
# create data at the team and year level --------------------------------------
data_year_team <- create_data_year(rbind(pre_wc$by_team, wc$by_team))
exfile_matches <- file.path(dir_data, "3.clean/ind_all_matches.csv")
#import intermediate data
pre_wc <- import(file.path(dir_data, "2.1.intermediate/matches_before_WC.rds"))
wc <-  import(file.path(dir_data, "2.1.intermediate/WC_matches.rds"))
class(pre_wc$scores$Date)
class(wc$scores$Date)
#Create ind_all_matches.csv
all_matches <-  rbind(wc$scores, pre_wc$scores ) %>% mutate(Date = as.Date(Date)) %>% arrange(desc(Date))
#==============================================================================
# Data of teams by year (indicators by Away, Home, Neutral and all matches)
# Function to create indicators at the different venue -------------------------
indicators_matches <- function(.data, prefix, venues = c("Away", "Home", "Neutral")){
.data %>%
#keep only venue of interest
filter(Venue %in% venues) %>%
group_by(team, year) %>%
filter(!is.na(GF)) %>%
summarise("matches" := n(),
"matches_win" := sum(Result == "W"),
"matches_lost" := sum(Result == "L"),
"matches_drawn" := sum(Result == "D"),
"efectividad" := matches_win/matches,
"fail_GF" := sum(GF == 0),
"fail_GA" := sum(GF == 0),
"GF" := sum(GF),
"GA" := sum(GA),
"Gdiff" = GF - GA,
.groups = 'drop'
) %>%
#normalized by the number of matches played
mutate(across(-c(team, year, starts_with("matches"), efectividad), ~ .x/matches, .names = "nrm_{.col}")) %>%
relocate(year, team, starts_with("matches"), GF, GA, Gdiff) %>%
#rename variables based on the venue played
rename_at(vars(-c("team", "year")), function(x)paste(prefix,x, sep = "_"))
}
# function to loop over all the venue types to create indicators --------------
create_data_year <- function(.data, venues = c("Away", "Home", "Neutral")){
#all games
all_ <- indicators_matches(.data, prefix = "all", venues )
#games by venue
my_list <- lapply(venues, function(v){
print(v)
my_data <- indicators_matches(.data, prefix = v, venues = v)
})
#append data
appended_venues <- plyr::join_all(my_list, by = c("team", "year"))
appended <- left_join(all_, appended_venues, by = c("team", "year"))
}
# create data at the team and year level --------------------------------------
data_year_team <- create_data_year(rbind(pre_wc$by_team, wc$by_team))
View(data_year_team)
export(all_matches, exfile_matches)
exfile_year_team <- file.path(dir_data, "3.clean/ind_teams_year.csv")
export(data_year_team, exfile_year_team)
message("Matches are cleaned!")
#1. Get matches of 2022 but before the WC
source(file.path(dir_r,"fbref_matches/2.Scrap_games_2022_before_WC.R"))
#2. Clean matches before the WC
source(file.path(dir_r,"fbref_matches/4.clean_matches_before_WC.R")) #exports to data/2.1intermediate/matches_before_WC.rds
print("saved to:", exfile)
exfile
paste("saved to:", exfile)
#2. Clean matches before the WC
source(file.path(dir_r,"fbref_matches/4.clean_matches_before_WC.R")) #exports to data/2.1intermediate/matches_before_WC.rds
#Scrap the world cup matches --------------------------------------------------
source(file.path(dir_r,"request_matches.R"), encoding = "UTF-8")
#Scrap the world cup matches --------------------------------------------------
source(file.path(dir_r,"request_WC_scores.R"), encoding = "UTF-8")
print("Matches downladed:", nrow(scores_matches))
paste("Matches downladed:", nrow(scores_matches))
#Scrap the world cup matches --------------------------------------------------
source(file.path(dir_r,"request_WC_scores.R"), encoding = "UTF-8")
#Scrap the world cup matches --------------------------------------------------
source(file.path(dir_r,"request_WC_scores.R"), encoding = "UTF-8")
#Clean matches ------------------------------------------------------------------
#Create tables "ind_all_matches.csv" that contains all the matches played since 2012 and to be played until the end of the WC
#ind_teams_year.csv" that contains the summary stats of each country since 2012
source(file.path(dir_r, "Append_before_and_WC.R"), encoding = "UTF-8")
#Download oods to win the World Cup --------------------------------------------
source("R_/request_odds.R", encoding = "UTF-8")
#Download oods to win the World Cup --------------------------------------------
source(file.path(dir_r,"request_odds.R"), encoding = "UTF-8")
#Download oods to win the World Cup --------------------------------------------
source(file.path(dir_r,"request_WC_odds_winners.R"), encoding = "UTF-8")
#Daily flow c
library(dplyr)
library(httr)
library(rio)
library(rvest)
library(tibble)
library(tidyr)
gmdacr::load_functions("functions")
sistema <- Sys.info()['sysname']
get_proj_dir <- function(){
if(sistema == "Windows"){
my_dir <- getwd()
} else {
my_dir = "/home/rstudio/CariQuniela"
}
}
dir_data <- file.path(get_proj_dir(), "data")
dir_r <- file.path(get_proj_dir(), "R_")
#1. Get matches of 2022 but before the WC (only run before the WC)
source(file.path(dir_r,"fbref_matches/2.Scrap_games_2022_before_WC.R")) #exports to data/2.scrapped/fbref/matches_2022_before_WC.csv
#2. Clean matches before the WC
source(file.path(dir_r,"fbref_matches/4.clean_matches_before_WC.R")) #exports to data/2.1intermediate/matches_before_WC.rds
#Scrap the world cup matches --------------------------------------------------
source(file.path(dir_r,"request_WC_scores.R"), encoding = "UTF-8") #exports to data/2.1.intermediate/WC_matches.rds
#Clean matches ------------------------------------------------------------------
#Create tables "ind_all_matches.csv" that contains all the matches played since 2012 and to be played until the end of the WC
#ind_teams_year.csv" that contains the summary stats of each country since 2012
source(file.path(dir_r, "Append_before_and_WC.R"), encoding = "UTF-8")
#Download oods to win the World Cup --------------------------------------------
source(file.path(dir_r,"request_WC_odds_winners.R"), encoding = "UTF-8")
#Commit and push to repo -----------------------------------------------------
temp_terminal <- rstudioapi::terminalExecute("myterminal.sh")
rstudioapi::terminalKill(temp_terminal)
#Commit and push to repo -----------------------------------------------------
temp_terminal <- rstudioapi::terminalExecute("myterminal.sh")
rstudioapi::terminalKill(temp_terminal)
#Commit and push to repo -----------------------------------------------------
temp_terminal <- rstudioapi::terminalExecute("myterminal.sh")
rstudioapi::terminalKill(temp_terminal)
