summarise(matches = n(),
GF = sum(GF),
GA == sum(GA)
)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
GF = sum(GF),
GA = sum(GA)
)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
GF = sum(GF),
GA = sum(GA),
no_goals = sum(GF == 0)
)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
no_goals = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
)
View(teams_urls)
dups <- db_to_group %>%
get_dupes(Date, Opponent)
View(dups)
dups <- db_to_group %>%
get_dupes(Date, Opponent, Team)
dups <- db_to_group %>%
get_dupes(Date, Opponent, team)
View(dups)
db_to_group <- all_comps %>%
#drop not played matches
filter(GF != "") %>%
#drop penalties in drawn matches
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4)
) %>%
distinct()
dups <- db_to_group %>%
get_dupes(Date, Opponent, team)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
no_goals = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
)
db_to_group <- all_comps %>%
#drop not played matches
filter(GF != "") %>%
#drop penalties in drawn matches
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4)
) %>%
relocate(year)
View(db_to_group)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
SIN_GF = sum(GF == 0),
SIN_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA
)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
SIN_GF = sum(GF == 0),
SIN_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
)
names(db_to_group)
tabyl(db_to_group, Result)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = Result == "W",
matches_lost = Result == "L",
matches_drawn = Result == "D",
SIN_GF = sum(GF == 0),
SIN_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
)
View(data_year)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
SIN_GF = sum(GF == 0),
SIN_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
efectividad = matches_win/matches,
SIN_GF = sum(GF == 0),
SIN_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
efectividad = matches_win/matches,
fail_GF = sum(GF == 0),
fail_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
)
norm_vars <- data_year %>%
select(-efectividad) %>%
summarise_at(is.numeric, function(x)X*100)
norm_vars <- data_year %>%
select(-efectividad) %>%
summarise_if(is.numeric, function(x)X*100)
norm_vars <- data_year %>%
select(-efectividad) %>%
summarise_if(is.numeric, function(x)x*100)
norm_vars <- data_year %>%
select(-efectividad) %>%
summarise_if(is.numeric, function(x)x/matches)
norm_vars <- data_year %>%
select(-efectividad) %>%
summarise_if(is.numeric, function(x)x/matches)
norm_vars <- data_year %>%
select(-efectividad) %>%
summarise_if(is.numeric, function(x)x * matches)
norm_vars <- data_year %>%
select(-efectividad) %>%
summarise_if(is.numeric, function(x)x * 100)
norm_vars <- data_year %>%
select(-efectividad) %>%
summarise_if(is.numeric, function(x)x * matches)
norm_vars <- data_year %>%
select(-efectividad) %>%
mutate_if(is.numeric, function(x)x*100)
norm_vars <- data_year %>%
select(-efectividad) %>%
mutate_if(is.numeric, function(x)x*matches)
norm_vars <- data_year %>%
select(-efectividad) %>%
mutate_if(is.numeric, function(x)x*100)
View(norm_vars)
#clean and create indicators
library(dplyr)
library(tidyr)
library(rio)
library(stringr)
library(janitor)
indir <- "data/2.scrapped"
infile <- file.path(exdir,"All_competitions.csv")
all_comps <- import(infile)
indir <- "data/2.scrapped"
infile <- file.path(exdir,"All_competitions.csv")
infile <- file.path(indir,"All_competitions.csv")
all_comps <- import(infile)
head(all_comps$Date)
db_to_group <- all_comps %>%
#drop not played matches
filter(GF != "") %>%
#drop penalties in drawn matches
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4)
) %>%
relocate(year)
db_to_group <- all_comps %>%
#drop not played matches
filter(GF != "") %>%
#drop penalties in drawn matches
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4)
) %>%
relocate(year) %>%
distinct()
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
efectividad = matches_win/matches,
fail_GF = sum(GF == 0),
fail_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
)
norm_vars <- data_year %>%
mutate(across(c(GF, GA), function(x)x/matches))
names(norm_vars)
norm_vars <- data_year %>%
mutate(across(c(GF, GA), function(x)x/matches, "n_"))
norm_vars <- data_year %>%
mutate(across(c(GF, GA), function(x)x/matches, "n_{x}"))
norm_vars <- data_year %>%
mutate(across(c(GF, GA), function(x)x/matches, "n_{.col}"))
norm_vars <- data_year %>%
mutate(across(c(GF, GA), function(x)x/matches, "{.col}"))
norm_vars <- data_year %>%
mutate(across(c(GF, GA), ~.x/matches))
norm_vars <- data_year %>%
mutate(across(c(GF, GA), ~.x/matches, .names = "mean_{.col}"))
norm_vars <- data_year %>%
mutate(across(c(GF, GA), ~.x/matches, .names = "nrm_{.col}"))
names(norm_vars)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
efectividad = matches_win/matches,
fail_GF = sum(GF == 0),
fail_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
) %>%
mutate(across(-c(team, year, matches), ~ .x))
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
efectividad = matches_win/matches,
fail_GF = sum(GF == 0),
fail_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
) %>%
mutate(across(-c(team, year, matches), ~ .x/matches, .names = "nrm_{.col}"))
names(data_year)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
efectividad = matches_win/matches,
fail_GF = sum(GF == 0),
fail_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
) %>%
mutate(across(-c(team, year, matches, efectividad), ~ .x/matches, .names = "nrm_{.col}"))
View(data_year)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
efectividad = matches_win/matches,
fail_GF = sum(GF == 0),
fail_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
) %>%
mutate(across(-c(team, year, startsWith("matches"), efectividad), ~ .x/matches, .names = "nrm_{.col}"))
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
efectividad = matches_win/matches,
fail_GF = sum(GF == 0),
fail_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
) %>%
mutate(across(-c(team, year, starts_with("matches"), efectividad), ~ .x/matches, .names = "nrm_{.col}"))
names(data_year)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
efectividad = matches_win/matches,
fail_GF = sum(GF == 0),
fail_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
) %>%
mutate(across(-c(team, year, starts_with("matches"), efectividad), ~ .x/matches, .names = "nrm_{.col}")) %>%
relocate(year, team, starts_with("matches"), GF, GA, diff)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
efectividad = matches_win/matches,
fail_GF = sum(GF == 0),
fail_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
) %>%
mutate(across(-c(team, year, starts_with("matches"), efectividad), ~ .x/matches, .names = "nrm_{.col}")) %>%
relocate(year, team, starts_with("matches"), GF, GA, Gdiff)
View(all_comps)
View(all_comps)
names(db_to_group)
db_to_group %>% janitor::tabyl(Saves)
db_to_group %>% janitor::tabyl(Sh)
#clean and create indicators
library(dplyr)
library(tidyr)
library(rio)
library(stringr)
library(janitor)
indir <- "data/2.scrapped"
infile <- file.path(indir,"All_competitions.csv")
all_comps <- import(infile)
#Define key variables for grouping  & drop duplicates---------------------------
db_to_group <- all_comps %>%
#drop not played matches
filter(GF != "") %>%
#drop penalties in drawn matches
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4)
) %>%
relocate(year) %>%
distinct()
View(db_to_group)
db_to_group <- all_comps %>%
#drop not played matches (these are matches to be played in the future)
filter(GF != "") %>%
#drop penalties in drawn matches, penalties are reported within parenthesis.
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4),
Opponent = str_remove(Opponent, "^[a-z][a-z] ")
) %>%
relocate(year) %>%
#remove duplicates (there were some duplicated matches while scrapping)
distinct()
names(db_to_group)
db_to_group <- all_comps %>%
#drop not played matches (these are matches to be played in the future)
filter(GF != "") %>%
#drop penalties in drawn matches, penalties are reported within parenthesis.
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4),
Opponent = str_remove(Opponent, "^[a-z][a-z] ")
) %>%
select(year, team, Opponent, Time, Comp, Day, Venue, Result, GF, GA)
db_to_group <- all_comps %>%
#drop not played matches (these are matches to be played in the future)
filter(GF != "") %>%
#drop penalties in drawn matches, penalties are reported within parenthesis.
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4),
Opponent = str_remove(Opponent, "^[a-z][a-z] ")
) %>%
select(year, team, Opponent, Time, Comp, Day, Venue, Result, GF, GA) %>%
#remove duplicates (there were some duplicated matches while scrapping)
distinct()
View(db_to_group)
db_to_group <- all_comps %>%
#drop not played matches (these are matches to be played in the future)
filter(GF != "") %>%
#drop penalties in drawn matches, penalties are reported within parenthesis.
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4),
Opponent = str_remove(Opponent, "^[a-z][a-z] ")
) %>%
select(year, team, Opponent, Date,Time, Comp, Day, Venue, Result, GF, GA) %>%
#remove duplicates (there were some duplicated matches while scrapping)
distinct()
View(db_to_group)
db_matches <- all_comps %>%
#drop not played matches (these are matches to be played in the future)
filter(GF != "") %>%
#drop penalties in drawn matches, penalties are reported within parenthesis.
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4),
Opponent = str_remove(Opponent, "^[a-z][a-z] ")
) %>%
select(year, team, Opponent, Date,Time, Comp, Day, Venue, Result, GF, GA) %>%
#remove duplicates (there were some duplicated matches while scrapping)
distinct()
data_year <- db_matches %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
efectividad = matches_win/matches,
fail_GF = sum(GF == 0),
fail_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
) %>%
mutate(across(-c(team, year, starts_with("matches"), efectividad), ~ .x/matches, .names = "nrm_{.col}")) %>%
relocate(year, team, starts_with("matches"), GF, GA, Gdiff)
View(data_year)
data_year_team <- db_matches %>%
#create indicators by team and year
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
efectividad = matches_win/matches,
fail_GF = sum(GF == 0),
fail_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
) %>%
#norm indicators by number of matches played
mutate(across(-c(team, year, starts_with("matches"), efectividad), ~ .x/matches, .names = "nrm_{.col}")) %>%
relocate(year, team, starts_with("matches"), GF, GA, Gdiff)
export(db_matches, exfile_matches)
exfile_matches <- file.path(exdir, "ind_all_matches.csv")
#clean and create indicators
library(dplyr)
library(tidyr)
library(rio)
library(stringr)
library(janitor)
indir <- "data/2.scrapped"
#all_competitions.csv is created in R_/scrap_games_teams.R
infile <- file.path(indir,"All_competitions.csv")
#Exit paths ---------------------------------------------------------------------
exdir <- "data/3.clean"
exfile_matches <- file.path(exdir, "ind_all_matches.csv")
exfile_year_team <-file.path(exdir, "ind_teams_year.csv")
#read scrapped data ----------------------------------------------------------
all_comps <- import(infile)
#Clean table of all matches & define year variable ---------------------------
db_matches <- all_comps %>%
#drop not played matches (these are matches to be played in the future)
filter(GF != "") %>%
#drop penalties in drawn matches, penalties are reported within parenthesis.
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4),
Opponent = str_remove(Opponent, "^[a-z][a-z] ")
) %>%
select(year, team, Opponent, Date,Time, Comp, Day, Venue, Result, GF, GA) %>%
#remove duplicates (there were some duplicated matches while scrapping)
distinct()
#Define indicators by year and country ---------------------------------------
data_year_team <- db_matches %>%
#create indicators by team and year
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
efectividad = matches_win/matches,
fail_GF = sum(GF == 0),
fail_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
) %>%
#norm indicators by number of matches played
mutate(across(-c(team, year, starts_with("matches"), efectividad), ~ .x/matches, .names = "nrm_{.col}")) %>%
relocate(year, team, starts_with("matches"), GF, GA, Gdiff)
#===============================================================================
#export data====================================================================
export(db_matches, exfile_matches)
export(data_year_team, exfile_year_team)
View(db_matches)
View(db_matches)
