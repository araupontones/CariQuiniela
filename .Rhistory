#message(x)
#get the table
table_stats <- read_html(x) %>%
html_element("#matchlogs_for") %>%
html_table()
#make the first row the table names
#
# #now get rid of the first row and delete redundant variables (duplicates)
# #this variables are already in fixture
new_names <- as.character(table_stats[1, ])
df_names <- tibble(names = new_names) %>% group_by(names) %>% mutate(row = row_number()) %>% ungroup()
table_stats_unique <- table_stats[ , df_names$row == 1]
names(table_stats_unique) <- table_stats_unique[1,]
table_stats_final <- table_stats_unique[-1, ] %>%
select(-c(Round,	Day, Time, Comp,	Venue,	Result, GA, GF, `Match Report`))
})
#join all tables
data_tablas <- plyr::join_all(lista_tablas, by = c("Date", "Opponent")) %>%
select(-PKatt)
#join with fixture
final_tabla <- fixture %>%
left_join(data_tablas, by = c("Date", "Opponent")) %>%
mutate(team = team) %>%
relocate(team)
} else {
cli::cli_alert("No existe")
NULL
}
})
all_years <- do.call(plyr::rbind.fill, get_years)
})
years <- as.character(seq(2010,2022,1))
all <- do.call(rbind, read_teams)
View(all)
nrow(teams_urls)
read_teams <- lapply(1:nrow(teams_urls), function(i){
url <- teams_urls$url[i]
team <-teams_urls$team[i]
get_years <- lapply(years, function(y){
message(paste(team, y))
#define the url for that year
url_year <- gsub("2022", y, url)
#read the website
website <- read_html(url_year)
#Fixture (all matches in that year)-------------------------------------------------
fixture <- website %>%
html_element("#matchlogs_for")
if(length(fixture) > 0){
fixture <- fixture %>%
html_table()
#get links to other tables ----------------------------------------------------
# Apart from fixture, there are three tables with relevant indicators
# misc, shooting and keeper
#lets get the link to those
links_to_tables <- website %>%
html_elements("a") %>%
html_attr("href")
#
all_comps <- links_to_tables[grepl("all_comps", links_to_tables)] %>% unique()
url_stats <- paste0("https://fbref.com/",all_comps[grepl("misc|shooting|keeper", all_comps)])
#
#
#
# #get the tables
lista_tablas <- lapply(url_stats, function(x){
#message(x)
#get the table
table_stats <- read_html(x) %>%
html_element("#matchlogs_for") %>%
html_table()
#make the first row the table names
#
# #now get rid of the first row and delete redundant variables (duplicates)
# #this variables are already in fixture
new_names <- as.character(table_stats[1, ])
df_names <- tibble(names = new_names) %>% group_by(names) %>% mutate(row = row_number()) %>% ungroup()
table_stats_unique <- table_stats[ , df_names$row == 1]
names(table_stats_unique) <- table_stats_unique[1,]
table_stats_final <- table_stats_unique[-1, ] %>%
select(-c(Round,	Day, Time, Comp,	Venue,	Result, GA, GF, `Match Report`))
})
#join all tables
data_tablas <- plyr::join_all(lista_tablas, by = c("Date", "Opponent")) %>%
select(-PKatt)
#join with fixture
final_tabla <- fixture %>%
left_join(data_tablas, by = c("Date", "Opponent")) %>%
mutate(team = team) %>%
relocate(team)
} else {
cli::cli_alert("No existe")
NULL
}
})
all_years <- do.call(plyr::rbind.fill, get_years)
})
years <- as.character(seq(2012,2022,1))
read_teams <- lapply(1:nrow(teams_urls), function(i){
url <- teams_urls$url[i]
team <-teams_urls$team[i]
get_years <- lapply(years, function(y){
message(paste(team, y))
#define the url for that year
url_year <- gsub("2022", y, url)
#read the website
website <- read_html(url_year)
#Fixture (all matches in that year)-------------------------------------------------
fixture <- website %>%
html_element("#matchlogs_for")
if(length(fixture) > 0){
fixture <- fixture %>%
html_table()
#get links to other tables ----------------------------------------------------
# Apart from fixture, there are three tables with relevant indicators
# misc, shooting and keeper
#lets get the link to those
links_to_tables <- website %>%
html_elements("a") %>%
html_attr("href")
#
all_comps <- links_to_tables[grepl("all_comps", links_to_tables)] %>% unique()
url_stats <- paste0("https://fbref.com/",all_comps[grepl("misc|shooting|keeper", all_comps)])
#
#
#
# #get the tables
lista_tablas <- lapply(url_stats, function(x){
#message(x)
#get the table
table_stats <- read_html(x) %>%
html_element("#matchlogs_for") %>%
html_table()
#make the first row the table names
#
# #now get rid of the first row and delete redundant variables (duplicates)
# #this variables are already in fixture
new_names <- as.character(table_stats[1, ])
df_names <- tibble(names = new_names) %>% group_by(names) %>% mutate(row = row_number()) %>% ungroup()
table_stats_unique <- table_stats[ , df_names$row == 1]
names(table_stats_unique) <- table_stats_unique[1,]
table_stats_final <- table_stats_unique[-1, ] %>%
select(-c(Round,	Day, Time, Comp,	Venue,	Result, GA, GF, `Match Report`))
})
#join all tables
data_tablas <- plyr::join_all(lista_tablas, by = c("Date", "Opponent")) %>%
select(-PKatt)
#join with fixture
final_tabla <- fixture %>%
left_join(data_tablas, by = c("Date", "Opponent")) %>%
mutate(team = team) %>%
relocate(team)
} else {
cli::cli_alert("No existe")
NULL
}
})
all_years <- do.call(plyr::rbind.fill, get_years)
})
all <- do.call(rbind, read_teams)
all <- do.call(plyr::rbind.fill,, read_teams)
all <- do.call(plyr::rbind.fill, read_teams)
View(all)
exfile <- file.path(exdir,"All_competitions.csv")
exdir <- "data/2.scrapped"
#export
export(exfile)
#export
export(all,exfile)
library(janitor)
names(all)
#clean and create indicators
library(dplyr)
library(tidyr)
indir <- "data/2.scrapped"
infile <- file.path(exdir,"All_competitions.csv")
all_comps <- import(infile)
library(rio)
head(all_comps$Date)
library(stringr)
db_to_group <- all_comps %>%
mutate(year = str_sub(Date,1,4))
head(db_to_group$year)
names(all_comps)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n())
View(data_year)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
GF = sum(GF)
)
data_year <- db_to_group %>%
mutate(across(c(GF, GA), function(x)as.numeric(x)))
data_year <- db_to_group
db_to_group <- all_comps %>%
filter(GF != "") %>%
mutate(year = str_sub(Date,1,4))
db_to_group <- all_comps %>%
#drop not played matches
filter(GF != "") %>%
mutate(year = str_sub(Date,1,4))
data_year <- db_to_group
data_year <- db_to_group %>%
mutate(across(c(GF, GA), function(x)as.numeric(x)))
View(db_to_group)
View(db_to_group)
data_year <- db_to_group %>%
mutate(GF = as.numeric(GF))
library(janitor)
db_to_group %>% tabyl(GF)
db_to_group <- all_comps %>%
mutate(GF = gsub('([0-9])','', GF))
db_to_group <- all_comps %>%
mutate(GF = gsub('([0-9])','', GF)) %>%
#drop not played matches
filter(GF != "") %>%
mutate(year = str_sub(Date,1,4))
db_to_group %>% tabyl(GF)
db_to_group <- all_comps %>%
mutate(GF = gsub('(*)','', GF)) %>%
#drop not played matches
filter(GF != "") %>%
mutate(year = str_sub(Date,1,4))
db_to_group %>% tabyl(GF)
db_to_group <- all_comps %>%
mutate(GF = gsub(' (2) ','', GF)) %>%
#drop not played matches
filter(GF != "") %>%
mutate(year = str_sub(Date,1,4))
db_to_group %>% tabyl(GF)
db_to_group <- all_comps %>%
mutate(GF = gsub(' \\(2) ','', GF)) %>%
#drop not played matches
filter(GF != "") %>%
mutate(year = str_sub(Date,1,4))
db_to_group %>% tabyl(GF)
db_to_group <- all_comps %>%
mutate(GF = gsub(' \\(2\\) ','', GF)) %>%
#drop not played matches
filter(GF != "") %>%
mutate(year = str_sub(Date,1,4))
db_to_group %>% tabyl(GF)
db_to_group <- all_comps %>%
mutate(GF = gsub(' \(2\) ','', GF)) %>%
#drop not played matches
filter(GF != "") %>%
mutate(year = str_sub(Date,1,4))
db_to_group %>% tabyl(GF)
db_to_group <- all_comps %>%
mutate(GF = gsub(' \(2\) ','', GF)) %>%
#drop not played matches
filter(GF != "") %>%
mutate(year = str_sub(Date,1,4))
db_to_group <- all_comps %>%
mutate(GF = gsub(' \(2\) ','', GF))
db_to_group <- all_comps %>%
mutate(GF = gsub(' //(2\) ','', GF))
db_to_group <- all_comps %>%
mutate(GF = gsub(' //(2//) ','', GF))
db_to_group %>% tabyl(GF)
db_to_group <- all_comps %>%
mutate(GF = gsub(' /(2//) ','', GF))
db_to_group <- all_comps %>%
mutate(GF = gsub(' /(2/) ','', GF))
db_to_group %>% tabyl(GF)
db_to_group <- all_comps %>%
mutate(GF = gsub(' \( ','', GF))
db_to_group <- all_comps %>%
mutate(GF = gsub(' \\( ','', GF))
db_to_group %>% tabyl(GF)
db_to_group <- all_comps %>%
mutate(GF = gsub(' //( ','', GF))
db_to_group <- all_comps %>%
mutate(GF = gsub(' /( ','', GF))
db_to_group <- all_comps %>%
mutate(GF = str_replace(GF, "\\(",""))
db_to_group %>% tabyl(GF)
db_to_group <- all_comps %>%
mutate(GF = str_replace(GF, "\\(2",""))
db_to_group %>% tabyl(GF)
db_to_group <- all_comps %>%
mutate(GF = str_replace(GF, "\\(2\\)",""))
db_to_group %>% tabyl(GF)
db_to_group <- all_comps %>%
mutate(GF = str_replace(GF, "\\([0-9]\\)",""))
db_to_group %>% tabyl(GF)
View(all_comps)
db_to_group <- all_comps
db_to_group %>% tabyl(GF)
db_to_group <- all_comps %>%
mutate(GF = str_replace(GF, "\\([0-9]\\)",""))
db_to_group %>% tabyl(GF)
db_to_group <- all_comps %>%
mutate(GF2 = str_replace(GF, "\\([0-9]\\)",""))
db_to_group <- all_comps %>%
mutate(GF2 = str_replace(GF, "\\([0-9]\\)","")) %>%
relocate(GF, GF2)
db_to_group <- all_comps %>%
mutate(GF2 = str_replace(GF, "\\([0-9]\\)",""),
diff = GF2== GF) %>%
relocate(GF, GF2)
db_to_group <- all_comps %>%
mutate(GF2 = str_replace(GF, "\\([0-9]\\)",""),
diff = GF2== GF) %>%
relocate(GF, GF2, diff)
db_to_group %>% tabyl(GF2)
db_to_group <- all_comps %>%
mutate(across(c(GF, GA) , function(x)str_replace(x, "\\([0-9]\\)","")))
db_to_group %>% tabyl(GF)
db_to_group %>% tabyl(GA)
db_to_group <- all_comps %>%
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))))
db_to_group %>% tabyl(GA)
db_to_group %>% tabyl(Gaf)
db_to_group %>% tabyl(GF'')
db_to_group <- all_comps %>%
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))))
db_to_group %>% tabyl(GF)
db_to_group <- all_comps %>%
#drop not played matches
filter(GF != "") %>%
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))))
db_to_group %>% tabyl(GF)
db_to_group %>% tabyl(ga)
db_to_group %>% tabyl(GA)
db_to_group <- all_comps %>%
#drop not played matches
filter(GF != "") %>%
#drop penalties in drawn matches
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4)
)
mutate()
db_to_group <- all_comps %>%
#drop not played matches
filter(GF != "") %>%
#drop penalties in drawn matches
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4)
)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
GF = sum(GF),
GA == sum(GA)
)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
GF = sum(GF),
GA = sum(GA)
)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
GF = sum(GF),
GA = sum(GA),
no_goals = sum(GF == 0)
)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
no_goals = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
)
View(teams_urls)
dups <- db_to_group %>%
get_dupes(Date, Opponent)
View(dups)
dups <- db_to_group %>%
get_dupes(Date, Opponent, Team)
dups <- db_to_group %>%
get_dupes(Date, Opponent, team)
View(dups)
db_to_group <- all_comps %>%
#drop not played matches
filter(GF != "") %>%
#drop penalties in drawn matches
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4)
) %>%
distinct()
dups <- db_to_group %>%
get_dupes(Date, Opponent, team)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
no_goals = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
)
db_to_group <- all_comps %>%
#drop not played matches
filter(GF != "") %>%
#drop penalties in drawn matches
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4)
) %>%
relocate(year)
View(db_to_group)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
SIN_GF = sum(GF == 0),
SIN_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA
)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
SIN_GF = sum(GF == 0),
SIN_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
)
names(db_to_group)
tabyl(db_to_group, Result)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = Result == "W",
matches_lost = Result == "L",
matches_drawn = Result == "D",
SIN_GF = sum(GF == 0),
SIN_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
)
View(data_year)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
SIN_GF = sum(GF == 0),
SIN_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
efectividad = matches_win/matches,
SIN_GF = sum(GF == 0),
SIN_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
)
data_year <- db_to_group %>%
group_by(team, year) %>%
summarise(matches = n(),
matches_win = sum(Result == "W"),
matches_lost = sum(Result == "L"),
matches_drawn = sum(Result == "D"),
efectividad = matches_win/matches,
fail_GF = sum(GF == 0),
fail_GA = sum(GF == 0),
GF = sum(GF),
GA = sum(GA),
Gdiff = GF - GA,
.groups = 'drop'
)
norm_vars <- data_year %>%
select(-efectividad) %>%
summarise_at(is.numeric, function(x)X*100)
norm_vars <- data_year %>%
select(-efectividad) %>%
summarise_if(is.numeric, function(x)X*100)
norm_vars <- data_year %>%
select(-efectividad) %>%
summarise_if(is.numeric, function(x)x*100)
norm_vars <- data_year %>%
select(-efectividad) %>%
summarise_if(is.numeric, function(x)x/matches)
norm_vars <- data_year %>%
select(-efectividad) %>%
summarise_if(is.numeric, function(x)x/matches)
norm_vars <- data_year %>%
select(-efectividad) %>%
summarise_if(is.numeric, function(x)x * matches)
norm_vars <- data_year %>%
select(-efectividad) %>%
summarise_if(is.numeric, function(x)x * 100)
norm_vars <- data_year %>%
select(-efectividad) %>%
summarise_if(is.numeric, function(x)x * matches)
norm_vars <- data_year %>%
select(-efectividad) %>%
mutate_if(is.numeric, function(x)x*100)
norm_vars <- data_year %>%
select(-efectividad) %>%
mutate_if(is.numeric, function(x)x*matches)
norm_vars <- data_year %>%
select(-efectividad) %>%
mutate_if(is.numeric, function(x)x*100)
View(norm_vars)
