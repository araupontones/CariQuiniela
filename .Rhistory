#keep only venue of interest
filter(Venue %in% venues) %>%
group_by(team, year) %>%
filter(!is.na(GF)) %>%
#normalize by FIFA index
mutate(#fail to score
did_score_index = (GF > 0) * visitante_fifa_index,
fail_to_score_index = (GF == 0) * (1 - visitante_fifa_index),
did_receive_goal_index = (GA > 0) * visitante_fifa_idex,
didnt_receive_goal_index = (GA == 0) * (1 - visitante_fifa_index)
) %>%
#summarise by year
summarise("matches" := n(),
"matches_win" := sum(Result == "W"),
"matches_lost" := sum(Result == "L"),
"matches_drawn" := sum(Result == "D"),
"efectividad" := matches_win/matches,
#did score ---------------------------------------------------
did_score = sum(GF >0),
did_score_index = sum(did_score_index),
#fail to score --------------------------------------------------
"fail_to_score" := sum(GF == 0),
fail_to_score_index = sum(fail_to_score_index,na.rm = T),
#did receive goal -----------------------------------------------
did_receive_goal = sum(GA >0),
did_receive_goal_index = sum(did_receive_goal_index),
#didnt receive goal ---------------------------------------------
didnt_receive_goal = sum(GA == 0),
didnt_receive_goal_index = sum(didnt_receive_goal_index),
#goles a favor, en contra y diferencia ----------------------------
"GF" := sum(GF),
GF_index = sum(GF_index, na.rm = T),
"GA" := sum(GA),
GA_index = sum(GA_index, na.rm = T),
"Gdiff" := GF - GA,
.groups = 'drop'
) %>%
#normalized by the number of matches played
mutate(across(-c(team, year, starts_with("matches"), efectividad), ~ .x/matches, .names = "nrm_{.col}")) %>%
relocate(year, team, starts_with("matches"), GF, GF_index, GA,GA_index, Gdiff) %>%
#rename variables based on the venue played
rename_at(vars(-c("team", "year")), function(x)paste(prefix,x, sep = "_"))
}
# function to loop over all the venue types to create indicators --------------
create_data_year <- function(.data, venues = c("Away", "Home", "Neutral")){
#all games
all_ <- indicators_matches(.data, prefix = "all", venues )
#games by venue
my_list <- lapply(venues, function(v){
print(v)
my_data <- indicators_matches(.data, prefix = v, venues = v)
})
#append data
appended_venues <- plyr::join_all(my_list, by = c("team", "year"))
appended <- left_join(all_, appended_venues, by = c("team", "year"))
}
data_year_team <- rbind(pre_wc$by_team, wc$by_team) %>%
#get fifa quarters
create_quarter(., Date) %>%
mutate(quarter = ifelse(qatar, "WC", quarter)) %>%
get_rankings(., rankings_fifa) %>%
#clean rankings of missing countries in ranking
mutate(visitante_fifa_index = case_when(Opponent == "Cape Verde" ~ 0.7530017,
Opponent == "N. Macedonia" ~ 0.73779938,
Opponent == "Guadeloupe" ~ 0.008130081,
Opponent == "Martinique" ~ 0.008130081,
Opponent == "Eswatini" ~ 0.008130081,
Opponent == "Gibraltar" ~ 0.009130081,
Opponent == "French Guiana" ~ 0.009130081,
Opponent == "SÃ£o TomÃ©" ~ 0.008130081,
Opponent == "San Marino" ~ 0.009130081,
T ~ visitante_fifa_index)) %>%
create_data_year(.)
.data %>%
#keep only venue of interest
filter(Venue %in% venues) %>%
group_by(team, year) %>%
filter(!is.na(GF)) %>%
#normalize by FIFA index
mutate(#fail to score
did_score_index = (GF > 0) * visitante_fifa_index,
fail_to_score_index = (GF == 0) * (1 - visitante_fifa_index),
did_receive_goal_index = (GA > 0) * visitante_fifa_index,
didnt_receive_goal_index = (GA == 0) * (1 - visitante_fifa_index)
) %>%
#summarise by year
summarise("matches" := n(),
"matches_win" := sum(Result == "W"),
"matches_lost" := sum(Result == "L"),
"matches_drawn" := sum(Result == "D"),
"efectividad" := matches_win/matches,
#did score ---------------------------------------------------
did_score = sum(GF >0),
did_score_index = sum(did_score_index),
#fail to score --------------------------------------------------
"fail_to_score" := sum(GF == 0),
fail_to_score_index = sum(fail_to_score_index,na.rm = T),
#did receive goal -----------------------------------------------
did_receive_goal = sum(GA >0),
did_receive_goal_index = sum(did_receive_goal_index),
#didnt receive goal ---------------------------------------------
didnt_receive_goal = sum(GA == 0),
didnt_receive_goal_index = sum(didnt_receive_goal_index),
#goles a favor, en contra y diferencia ----------------------------
"GF" := sum(GF),
GF_index = sum(GF_index, na.rm = T),
"GA" := sum(GA),
GA_index = sum(GA_index, na.rm = T),
"Gdiff" := GF - GA,
.groups = 'drop'
) %>%
#normalized by the number of matches played
mutate(across(-c(team, year, starts_with("matches"), efectividad), ~ .x/matches, .names = "nrm_{.col}")) %>%
relocate(year, team, starts_with("matches"), GF, GF_index, GA,GA_index, Gdiff) %>%
#rename variables based on the venue played
rename_at(vars(-c("team", "year")), function(x)paste(prefix,x, sep = "_"))
# Function to create indicators at the different venue -------------------------
indicators_matches <- function(.data, prefix, venues = c("Away", "Home", "Neutral")){
.data %>%
#keep only venue of interest
filter(Venue %in% venues) %>%
group_by(team, year) %>%
filter(!is.na(GF)) %>%
#normalize by FIFA index
mutate(#fail to score
did_score_index = (GF > 0) * visitante_fifa_index,
fail_to_score_index = (GF == 0) * (1 - visitante_fifa_index),
did_receive_goal_index = (GA > 0) * visitante_fifa_index,
didnt_receive_goal_index = (GA == 0) * (1 - visitante_fifa_index)
) %>%
#summarise by year
summarise("matches" := n(),
"matches_win" := sum(Result == "W"),
"matches_lost" := sum(Result == "L"),
"matches_drawn" := sum(Result == "D"),
"efectividad" := matches_win/matches,
#did score ---------------------------------------------------
did_score = sum(GF >0),
did_score_index = sum(did_score_index),
#fail to score --------------------------------------------------
"fail_to_score" := sum(GF == 0),
fail_to_score_index = sum(fail_to_score_index,na.rm = T),
#did receive goal -----------------------------------------------
did_receive_goal = sum(GA >0),
did_receive_goal_index = sum(did_receive_goal_index),
#didnt receive goal ---------------------------------------------
didnt_receive_goal = sum(GA == 0),
didnt_receive_goal_index = sum(didnt_receive_goal_index),
#goles a favor, en contra y diferencia ----------------------------
"GF" := sum(GF),
GF_index = sum(GF_index, na.rm = T),
"GA" := sum(GA),
GA_index = sum(GA_index, na.rm = T),
"Gdiff" := GF - GA,
.groups = 'drop'
) %>%
#normalized by the number of matches played
mutate(across(-c(team, year, starts_with("matches"), efectividad), ~ .x/matches, .names = "nrm_{.col}")) %>%
relocate(year, team, starts_with("matches"), GF, GF_index, GA,GA_index, Gdiff) %>%
#rename variables based on the venue played
rename_at(vars(-c("team", "year")), function(x)paste(prefix,x, sep = "_"))
}
# function to loop over all the venue types to create indicators --------------
create_data_year <- function(.data, venues = c("Away", "Home", "Neutral")){
#all games
all_ <- indicators_matches(.data, prefix = "all", venues )
#games by venue
my_list <- lapply(venues, function(v){
print(v)
my_data <- indicators_matches(.data, prefix = v, venues = v)
})
#append data
appended_venues <- plyr::join_all(my_list, by = c("team", "year"))
appended <- left_join(all_, appended_venues, by = c("team", "year"))
}
data_year_team <- rbind(pre_wc$by_team, wc$by_team) %>%
#get fifa quarters
create_quarter(., Date) %>%
mutate(quarter = ifelse(qatar, "WC", quarter)) %>%
get_rankings(., rankings_fifa) %>%
#clean rankings of missing countries in ranking
mutate(visitante_fifa_index = case_when(Opponent == "Cape Verde" ~ 0.7530017,
Opponent == "N. Macedonia" ~ 0.73779938,
Opponent == "Guadeloupe" ~ 0.008130081,
Opponent == "Martinique" ~ 0.008130081,
Opponent == "Eswatini" ~ 0.008130081,
Opponent == "Gibraltar" ~ 0.009130081,
Opponent == "French Guiana" ~ 0.009130081,
Opponent == "SÃ£o TomÃ©" ~ 0.008130081,
Opponent == "San Marino" ~ 0.009130081,
T ~ visitante_fifa_index)) %>%
create_data_year(.)
# Function to create indicators at the different venue -------------------------
indicators_matches <- function(.data, prefix, venues = c("Away", "Home", "Neutral")){
.data %>%
#keep only venue of interest
filter(Venue %in% venues) %>%
group_by(team, year) %>%
filter(!is.na(GF)) %>%
#normalize by FIFA index
mutate(#fail to score
did_score_index = (GF > 0) * visitante_fifa_index,
fail_to_score_index = (GF == 0) * (1 - visitante_fifa_index),
did_receive_goal_index = (GA > 0) * visitante_fifa_index,
didnt_receive_goal_index = (GA == 0) * (1 - visitante_fifa_index)
) %>%
#summarise by year
summarise("matches" := n(),
"matches_win" := sum(Result == "W"),
"matches_lost" := sum(Result == "L"),
"matches_drawn" := sum(Result == "D"),
"efectividad" := matches_win/matches,
#did score ---------------------------------------------------
did_score = sum(GF >0),
did_score_index = sum(did_score_index),
#fail to score --------------------------------------------------
"fail_to_score" := sum(GF == 0),
fail_to_score_index = sum(fail_to_score_index,na.rm = T),
#did receive goal -----------------------------------------------
did_receive_goal = sum(GA >0),
did_receive_goal_index = sum(did_receive_goal_index),
#didnt receive goal ---------------------------------------------
didnt_receive_goal = sum(GA == 0),
didnt_receive_goal_index = sum(didnt_receive_goal_index),
#goles a favor, en contra y diferencia ----------------------------
"GF" := sum(GF),
GF_index = sum(GF_index, na.rm = T),
"GA" := sum(GA),
GA_index = sum(GA_index, na.rm = T),
"Gdiff" := GF - GA,
.groups = 'drop'
) %>%
#normalized by the number of matches played
mutate(across(-c(team, year, starts_with("matches"), efectividad), ~ .x/matches, .names = "nrm_{.col}")) %>%
relocate(year, team, starts_with("matches"), GF, GA, Gdiff) %>%
#rename variables based on the venue played
rename_at(vars(-c("team", "year")), function(x)paste(prefix,x, sep = "_"))
}
# function to loop over all the venue types to create indicators --------------
create_data_year <- function(.data, venues = c("Away", "Home", "Neutral")){
#all games
all_ <- indicators_matches(.data, prefix = "all", venues )
#games by venue
my_list <- lapply(venues, function(v){
print(v)
my_data <- indicators_matches(.data, prefix = v, venues = v)
})
#append data
appended_venues <- plyr::join_all(my_list, by = c("team", "year"))
appended <- left_join(all_, appended_venues, by = c("team", "year"))
}
data_year_team <- rbind(pre_wc$by_team, wc$by_team) %>%
#get fifa quarters
create_quarter(., Date) %>%
mutate(quarter = ifelse(qatar, "WC", quarter)) %>%
get_rankings(., rankings_fifa) %>%
#clean rankings of missing countries in ranking
mutate(visitante_fifa_index = case_when(Opponent == "Cape Verde" ~ 0.7530017,
Opponent == "N. Macedonia" ~ 0.73779938,
Opponent == "Guadeloupe" ~ 0.008130081,
Opponent == "Martinique" ~ 0.008130081,
Opponent == "Eswatini" ~ 0.008130081,
Opponent == "Gibraltar" ~ 0.009130081,
Opponent == "French Guiana" ~ 0.009130081,
Opponent == "SÃ£o TomÃ©" ~ 0.008130081,
Opponent == "San Marino" ~ 0.009130081,
T ~ visitante_fifa_index)) %>%
create_data_year(.)
# Function to create indicators at the different venue -------------------------
indicators_matches <- function(.data, prefix, venues = c("Away", "Home", "Neutral")){
.data %>%
#keep only venue of interest
filter(Venue %in% venues) %>%
group_by(team, year) %>%
filter(!is.na(GF)) %>%
#normalize by FIFA index
mutate(#fail to score
did_score_index = (GF > 0) * visitante_fifa_index,
fail_to_score_index = (GF == 0) * (1 - visitante_fifa_index),
did_receive_goal_index = (GA > 0) * visitante_fifa_index,
didnt_receive_goal_index = (GA == 0) * (1 - visitante_fifa_index)
) %>%
#summarise by year
summarise("matches" := n(),
"matches_win" := sum(Result == "W"),
"matches_lost" := sum(Result == "L"),
"matches_drawn" := sum(Result == "D"),
"efectividad" := matches_win/matches,
#did score ---------------------------------------------------
did_score = sum(GF >0),
did_score_index = sum(did_score_index),
#fail to score --------------------------------------------------
"fail_to_score" := sum(GF == 0),
fail_to_score_index = sum(fail_to_score_index,na.rm = T),
#did receive goal -----------------------------------------------
did_receive_goal = sum(GA >0),
did_receive_goal_index = sum(did_receive_goal_index),
#didnt receive goal ---------------------------------------------
didnt_receive_goal = sum(GA == 0),
didnt_receive_goal_index = sum(didnt_receive_goal_index),
#goles a favor, en contra y diferencia ----------------------------
"GF" := sum(GF),
"GA" := sum(GA),
"Gdiff" := GF - GA,
.groups = 'drop'
) %>%
#normalized by the number of matches played
mutate(across(-c(team, year, starts_with("matches"), efectividad), ~ .x/matches, .names = "nrm_{.col}")) %>%
relocate(year, team, starts_with("matches"), GF, GA, Gdiff) %>%
#rename variables based on the venue played
rename_at(vars(-c("team", "year")), function(x)paste(prefix,x, sep = "_"))
}
# function to loop over all the venue types to create indicators --------------
create_data_year <- function(.data, venues = c("Away", "Home", "Neutral")){
#all games
all_ <- indicators_matches(.data, prefix = "all", venues )
#games by venue
my_list <- lapply(venues, function(v){
print(v)
my_data <- indicators_matches(.data, prefix = v, venues = v)
})
#append data
appended_venues <- plyr::join_all(my_list, by = c("team", "year"))
appended <- left_join(all_, appended_venues, by = c("team", "year"))
}
data_year_team <- rbind(pre_wc$by_team, wc$by_team) %>%
#get fifa quarters
create_quarter(., Date) %>%
mutate(quarter = ifelse(qatar, "WC", quarter)) %>%
get_rankings(., rankings_fifa) %>%
#clean rankings of missing countries in ranking
mutate(visitante_fifa_index = case_when(Opponent == "Cape Verde" ~ 0.7530017,
Opponent == "N. Macedonia" ~ 0.73779938,
Opponent == "Guadeloupe" ~ 0.008130081,
Opponent == "Martinique" ~ 0.008130081,
Opponent == "Eswatini" ~ 0.008130081,
Opponent == "Gibraltar" ~ 0.009130081,
Opponent == "French Guiana" ~ 0.009130081,
Opponent == "SÃ£o TomÃ©" ~ 0.008130081,
Opponent == "San Marino" ~ 0.009130081,
T ~ visitante_fifa_index)) %>%
create_data_year(.)
View(data_year_team)
export(all_matches, exfile_matches)
export(data_year_team, exfile_year_team)
message("Matches are cleaned!")
library(ggplot2)
years <- import(file.path(dir_data, "3.clean/ind_teams_year.csv"))
names(years)
test <- years %>%
filter(year == 2022) %>%
select(team,contains("fail_to_score")) %>%
mutate(int = all_nrm_fail_GF,
team = forcats::fct_reorder(team, -int)
) %>%
pivot_longer(-team) %>%
filter(name %in% c("int", "all_nrm_fail_GF_index"))
test <- years %>%
filter(year == 2022) %>%
select(team,contains("fail_to_score"))
test <- years %>%
filter(year == 2022) %>%
select(team,contains("fail_to_score")) %>%
mutate(int = all_nrm_fail_to_score,
team = forcats::fct_reorder(team, -int)
) %>%
pivot_longer(-team) %>%
filter(name %in% c("int", "all_nrm_fail_GF_index"))
test <- years %>%
filter(year == 2022) %>%
select(team,contains("fail_to_score")) %>%
mutate(int = all_nrm_fail_to_score,
team = forcats::fct_reorder(team, -int)
) %>%
pivot_longer(-team) %>%
filter(name %in% c("int", "all_nrm_fail_GF_index"))
test <- years %>%
filter(year == 2022) %>%
select(team,contains("fail_to_score"))
test <- years %>%
filter(year == 2022) %>%
select(team,contains("fail_to_score")) %>%
mutate(int = all_nrm_fail_to_score,
team = forcats::fct_reorder(team, -int)
) %>%
pivot_longer(-team)
test <- years %>%
filter(year == 2022) %>%
select(team,contains("fail_to_score")) %>%
mutate(int = all_nrm_fail_to_score,
team = forcats::fct_reorder(team, -int)
) %>%
pivot_longer(-team) %>%
filter(name %in% c("int", "all_nrm_fail_to_score"))
ggplot(data = test,
aes(x = value,
y = team,
color = name
)
) +
geom_point()
test <- years %>%
filter(year == 2022) %>%
select(team,contains("fail_to_score")) %>%
mutate(int = all_nrm_fail_to_score,
team = forcats::fct_reorder(team, -int)
) %>%
pivot_longer(-team) %>%
filter(name %in% c("int", "all_nrm_fail_to_score"))
ggplot(data = test,
aes(x = value,
y = team,
color = name
)
) +
geom_point()
test <- years %>%
filter(year == 2022) %>%
select(team,contains("fail_to_score")) %>%
mutate(int = all_nrm_fail_to_score,
team = forcats::fct_reorder(team, -int)
) %>%
pivot_longer(-team) %>%
filter(name %in% c("int", "all_nrm_fail_to_score"))
test <- years %>%
filter(year == 2022) %>%
select(team,contains("fail_to_score")) %>%
mutate(int = all_nrm_fail_to_score,
team = forcats::fct_reorder(team, -int)
) %>%
pivot_longer(-team) %>%
filter(name %in% c("int", "all_nrm_fail_to_score_index"))
ggplot(data = test,
aes(x = value,
y = team,
color = name
)
) +
geom_point()
test <- years %>%
filter(year == 2022) %>%
select(team,contains("fail_to_score")) %>%
mutate(int = all_nrm_fail_to_score,
team = forcats::fct_reorder(team, -all_nrm_fail_to_score_index)
) %>%
pivot_longer(-team) %>%
filter(name %in% c("int", "all_nrm_fail_to_score_index"))
ggplot(data = test,
aes(x = value,
y = team,
color = name
)
) +
geom_point()
test <- years %>%
filter(year == 2022) %>%
select(team,contains("did_score")) %>%
mutate(int = all_nrm_fail_to_score,
team = forcats::fct_reorder(team, -all_nrm_fail_to_score_index)
) %>%
pivot_longer(-team) %>%
filter(name %in% c("int", "all_nrm_did_score_index"))
test <- years %>%
filter(year == 2022) %>%
select(team,contains("did_score"))
test <- years %>%
filter(year == 2022) %>%
select(team,contains("did_score")) %>%
mutate(int = all_nrm_did_score,
team = forcats::fct_reorder(team, -all_nrm_did_score)
) %>%
pivot_longer(-team) %>%
filter(name %in% c("int", "all_nrm_did_score_index"))
ggplot(data = test,
aes(x = value,
y = team,
color = name
)
) +
geom_point()
#Daily flow c
library(dplyr)
library(httr)
library(rio)
library(rvest)
library(tibble)
library(tidyr)
library(glue)
#define working directory so linux can run with no problem
gmdacr::load_functions("functions")
sistema <- Sys.info()['sysname']
get_proj_dir <- function(){
if(sistema == "Windows"){
my_dir <- getwd()
} else {
my_dir = "/home/rstudio/CariQuiniela"
}
}
dir_data <- file.path(get_proj_dir(), "data")
dir_r <- file.path(get_proj_dir(), "R_")
#1. Get matches of 2022 but before the WC (only run before the WC)
#source(file.path(dir_r,"fbref_matches/2.Scrap_games_2022_before_WC.R")) #exports to data/2.scrapped/fbref/matches_2022_before_WC.csv
#2. Clean matches before the WC
#source(file.path(dir_r,"fbref_matches/4.clean_matches_before_WC.R")) #exports to data/2.1intermediate/matches_before_WC.rds
#Scrap the world cup matches --------------------------------------------------
#source(file.path(dir_r,"request_WC_scores.R"), encoding = "UTF-8") #exports to data/2.1.intermediate/WC_matches.rds
#Clean matches ------------------------------------------------------------------
#Create tables "ind_all_matches.csv" that contains all the matches played since 2012 and to be played until the end of the WC
#ind_teams_year.csv" that contains the summary stats of each country since 2012
source(file.path(dir_r, "Append_before_and_WC.R"), encoding = "UTF-8")
#Download oods to win the World Cup --------------------------------------------
source(file.path(dir_r,"request_WC_odds_winners.R"), encoding = "UTF-8") #saves ind_ods_einner.csv
