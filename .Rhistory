arrange(id_match) %>%
mutate(Venue = ifelse(is.na(id_opponent) & Venue == "Away", "awayNoWC", Venue)) %>%
#only keep home and neutral matches to capture goles local and goles visitante
filter(Venue %in% c("Home", "Neutral", "awayNoWC")) %>%
slice(1) %>%
#correct for teams that are not going to the WC
mutate(bucket = team,
team = ifelse(Venue == "awayNoWC", Opponent, team),
Opponent = ifelse(Venue == "awayNoWC", bucket, Opponent),
goles_local = case_when(Venue == "awayNoWC" ~ GA,
T ~ GF),
goles_visitante = case_when(Venue == "awayNoWC" ~ GF,
T ~ GA),
neutral = Venue == "Neutral",
.after = "GA"
) %>%
select(-bucket) %>%
ungroup() %>%
select(-c(Venue, Result, GF, GA, starts_with("id_"))) %>%
arrange(-Date)
#transform matches as local vs visitante format ------------------------------
#this is the data to be exported
db_matches_unique <- db_matches %>% group_by(id_match) %>%
arrange(id_match) %>%
mutate(Venue = ifelse(is.na(id_opponent) & Venue == "Away", "awayNoWC", Venue)) %>%
#only keep home and neutral matches to capture goles local and goles visitante
filter(Venue %in% c("Home", "Neutral", "awayNoWC")) %>%
slice(1) %>%
#correct for teams that are not going to the WC
mutate(bucket = team,
team = ifelse(Venue == "awayNoWC", Opponent, team),
Opponent = ifelse(Venue == "awayNoWC", bucket, Opponent),
goles_local = case_when(Venue == "awayNoWC" ~ GA,
T ~ GF),
goles_visitante = case_when(Venue == "awayNoWC" ~ GF,
T ~ GA),
neutral = Venue == "Neutral",
.after = "GA"
) %>%
select(-bucket) %>%
ungroup() %>%
select(-c(Venue, Result, GF, GA, starts_with("id_"))) %>%
arrange(desc(Date))
names(db_matches)
tabyl(db_matches, GF)
#transform matches as local vs visitante format ------------------------------
#this is the data to be exported
db_matches_unique <- db_matches %>% group_by(id_match) %>%
arrange(id_match) %>%
mutate(Venue = ifelse(is.na(id_opponent) & Venue == "Away", "awayNoWC", Venue)) %>%
#only keep home and neutral matches to capture goles local and goles visitante
filter(Venue %in% c("Home", "Neutral", "awayNoWC")) %>%
slice(1) %>%
#correct for teams that are not going to the WC
mutate(bucket = team,
team = ifelse(Venue == "awayNoWC", Opponent, team),
Opponent = ifelse(Venue == "awayNoWC", bucket, Opponent),
goles_local = case_when(Venue == "awayNoWC" ~ GA,
T ~ GF),
goles_visitante = case_when(Venue == "awayNoWC" ~ GF,
T ~ GA),
neutral = Venue == "Neutral",
.after = "GA"
) %>%
select(-bucket) %>%
ungroup() %>%
select(-c(Venue, Result, GF, GA, starts_with("id_"))) %>%
arrange(desc(Date))
#clean and create indicators
library(dplyr)
library(tidyr)
library(rio)
library(stringr)
library(janitor)
indir <- "data/2.scrapped/fbref"
#all_competitions.csv is created in R_/scrap_games_teams.R
infile_WC <-  file.path(indir,"WC_matches.csv")
infile_all <- file.path(indir,"All_competitions.csv")
look_up <- import("data/1.lookups/teams_urls.csv") %>% select(team, id)
#Exit paths ---------------------------------------------------------------------
exdir <- "data/3.clean"
exfile_matches <- file.path(exdir, "ind_all_matches.csv")
exfile_year_team <-file.path(exdir, "ind_teams_year.csv")
#read scrapped data ----------------------------------------------------------
all_comps <- import(infile_all) %>% mutate(qatar = FALSE)  %>% filter(GF != "")
wc <- import(infile_WC)
#Clean table of all matches & define year variable ---------------------------
View(db_matches)
db_matches <- all_comps %>%
#select only variables that match with the WC matches
select(names(wc)) %>%
rbind(wc) %>%
#drop penalties in drawn matches, penalties are reported within parenthesis.
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4),
#remove iso2 and iso 3 from Opponent's name
Opponent = str_remove(Opponent, "^[a-z][a-z] "),
Opponent = str_remove(Opponent, "^[a-z][a-z][a-z] ")
) %>%
select(year, team, Opponent, Date,Time, Comp, Day, Venue, Result, GF, GA, qatar) %>%
#remove duplicates (there were some duplicated matches while scrapping)
distinct() %>%
#id match
left_join(look_up, by = "team") %>%
rename(id_team = id) %>%
left_join(look_up, by = c("Opponent"= "team")) %>%
rename(id_opponent = id) %>%
rowwise() %>%
#get id of match by combining the ID of the two teams
mutate(id_match = paste(sort(c(id_team, id_opponent)), collapse =  "-"),
id_match = paste(id_match, Date, sep = "-")) %>%
ungroup()
#transform matches as local vs visitante format ------------------------------
#this is the data to be exported
db_matches_unique <- db_matches %>% group_by(id_match) %>%
arrange(id_match) %>%
mutate(Venue = ifelse(is.na(id_opponent) & Venue == "Away", "awayNoWC", Venue)) %>%
#only keep home and neutral matches to capture goles local and goles visitante
filter(Venue %in% c("Home", "Neutral", "awayNoWC")) %>%
slice(1) %>%
#correct for teams that are not going to the WC
mutate(bucket = team,
team = ifelse(Venue == "awayNoWC", Opponent, team),
Opponent = ifelse(Venue == "awayNoWC", bucket, Opponent),
goles_local = case_when(Venue == "awayNoWC" ~ GA,
T ~ GF),
goles_visitante = case_when(Venue == "awayNoWC" ~ GF,
T ~ GA),
neutral = Venue == "Neutral",
.after = "GA"
) %>%
select(-bucket) %>%
ungroup() %>%
select(-c(Venue, Result, GF, GA, starts_with("id_"))) %>%
arrange(desc(Date))
#==============================================================================
# Data of teams by year (indicators by Away, Home, Neutral and all matches)
# Function to create indicators at the different venue -------------------------
indicators_matches <- function(.data, prefix, venues = c("Away", "Home", "Neutral")){
.data %>%
#keep only venue of interest
filter(Venue %in% venues) %>%
group_by(team, year) %>%
filter(!is.na(GF)) %>%
summarise("matches" := n(),
"matches_win" := sum(Result == "W"),
"matches_lost" := sum(Result == "L"),
"matches_drawn" := sum(Result == "D"),
"efectividad" := matches_win/matches,
"fail_GF" := sum(GF == 0),
"fail_GA" := sum(GF == 0),
"GF" := sum(GF),
"GA" := sum(GA),
"Gdiff" = GF - GA,
.groups = 'drop'
) %>%
#normalized by the number of matches played
mutate(across(-c(team, year, starts_with("matches"), efectividad), ~ .x/matches, .names = "nrm_{.col}")) %>%
relocate(year, team, starts_with("matches"), GF, GA, Gdiff) %>%
#rename variables based on the venue played
rename_at(vars(-c("team", "year")), function(x)paste(prefix,x, sep = "_"))
}
# function to loop over all the venue types to create indicators --------------
create_data_year <- function(.data, venues = c("Away", "Home", "Neutral")){
#all games
all_ <- indicators_matches(.data, prefix = "all", venues )
#games by venue
my_list <- lapply(venues, function(v){
print(v)
my_data <- indicators_matches(.data, prefix = v, venues = v)
})
#append data
appended_venues <- plyr::join_all(my_list, by = c("team", "year"))
appended <- left_join(all_, appended_venues, by = c("team", "year"))
}
# create data at the team and year level --------------------------------------
data_year_team <- create_data_year(db_matches)
View(db_matches)
View(data_year_team)
View(db_matches)
source("R_/fbref_matches/3.create_indicators.R", encoding = "UTF-8")
url <- "https://www.oddschecker.com/football/world-cup/winner"
library(rvest)
url <- "https://www.oddschecker.com/football/world-cup/winner"
url <- "https://www.oddschecker.com/football/world-cup/winner"
website <- read_html(url)
install.packages("oddsapiR")
devtools::install_git("saiemgiliani/oddsapiR")
devtools::install_git("saiemgilani/oddsapiR")
pacman::p_load_current_gh("saiemgilani/oddsapiR", dependencies = TRUE, update = TRUE)
library(oddsapiR)
oddsapiR::toa_sports_keys()
devtools::install_git("saiemgilani/oddsapiR")
library(httr)
token <- "324654c6d22a577030fead8bed15fc9d"
url <- "https://api.the-odds-api.com/v4/"
url_sports <- glue("{url}/?apiKey=")
url_sports <- glue("{url}/?apiKey=")
library(glue)
token <- "324654c6d22a577030fead8bed15fc9d"
url <- "https://api.the-odds-api.com/v4/"
url_sports <- glue("{url}/?apiKey=")
url_sports <- glue("{url}/?apiKey={token}")
sports <- GET(url_sports)
httr::status_code(sports)
url_sports <- glue("{url}/?apiKey={token}")
url_sports
url <- "https://api.the-odds-api.com/v4"
url_sports <- glue("{url}/?apiKey={token}")
url_sports
sports <- GET(url_sports)
httr::status_code(sports)
url_sports <- glue("{url}/sports/?apiKey={token}")
sports <- GET(url_sports)
httr::status_code(sports)
library(jsonlite)
raw_report <- fromJSON(content(sports, 'text'))$data
raw_report
content(sports)
fromJSON(content(sports))
fromJSON(content(sports, 'text'))
sports <- GET(url_sports)
sports_data <-fromJSON(content(sports, 'text'))$data
View(sports_data)
sports_data <-fromJSON(content(sports, 'text'))
View(sports_data)
wc <- glue("{url}/sports/soccer_fifa_world_cup/?apiKey={token}")
wc_url <- glue("{url}/sports/soccer_fifa_world_cup/?apiKey={token}")
wc <- GET(wc_url)
httr::status_code(wc)
wc_url
wc_url <- glue("{url}/sports/soccer_fifa_world_cup/?apiKey={token}&regions=eu")
wc_url
wc_url <- glue("https://api.the-odds-api.com/v4/sports/soccer_fifa_world_cup_winner/odds/?apiKey=324654c6d22a577030fead8bed15fc9d&regions=us")
wc <- GET(wc_url)
httr::status_code(wc)
wc_odds <- fromJSON(content(wc_url, 'text'))
wc_odds <- fromJSON(content(wc, 'text'))
View(wc$content)
content(wc)
response <-content(wc)
View(response)
response[[1]]
response[1]
response[[1]]$bookmakers$markets
response[[1]]$bookmakers
response[[1]]$bookmakers[[1]]
bookmajers <- response[[1]]$bookmakers
bookmakers <- response[[1]]$bookmakers
View(bookmakers)
lapply(bookmakers, function(x){
Title <- x[[1]]$Title
message(Title)
})
lapply(bookmakers, function(x){
Title <- x[[1]]
message(Title)
})
lapply(bookmakers, function(x){
Title <- x[[1]][1]
message(Title)
})
View(bookmakers)
lapply(bookmakers, function(x){
Title <-x[[1]]$title
message(Title)
})
bookmakers <- response[[1]]$bookmakers
lapply(bookmakers, function(x){
Title <-x[[1]]$title
message(Title)
})
lapply(bookmakers, function(x){
Title <-x$title
message(Title)
})
lapply(bookmakers, function(x){
Title <-x$title[1]
message(Title)
})
lapply(bookmakers, function(x){
Title <-x[1]$title
message(Title)
})
lapply(bookmakers, function(x){
Title <-x[[1]]
message(Title)
})
lapply(bookmakers, function(x){
Title <-x[[1]]
message(Title)
return(Title)
})
bookmakers[[1]]
test <- lapply(bookmakers, function(x){
return(x)
})
View(test)
test <- lapply(bookmakers, function(x){
return(x$markets)
})
View(test)
test <- lapply(bookmakers, function(x){
return(x$markets[[1]]$outcomes)
})
View(test)
test <- lapply(bookmakers, function(x){
outcomes <- x$markets[[1]]$outcomes
return(do.call(rbind, outcomes))
})
View(test)
test <- lapply(bookmakers, function(x){
outcomes <- x$markets[[1]]$outcomes
return(outcomes)
})
View(test)
test <- lapply(bookmakers, function(x){
outcomes <- x$markets[[1]]$outcomes[[1]]
return(outcomes)
})
View(test)
test <- lapply(bookmakers, function(x){
outcomes <- x$markets[[1]]$outcomes[1]
return(outcomes)
})
View(test)
test <- lapply(bookmakers, function(x){
outcomes <- x$markets[[1]]$outcomes
return(outcomes)
})
View(test)
test <- lapply(bookmakers, function(x){
outcomes <- x$markets[[1]]$outcomes
my_table <- fromJSON(outcomes)
return(my_table)
})
my_table <- outcomes
test <- lapply(bookmakers, function(x){
outcomes <- x$markets[[1]]$outcomes
my_table <- outcomes
return(my_table)
})
View(test)
my_table <- do.call(rbind, outcomes)
test <- lapply(bookmakers, function(x){
outcomes <- x$markets[[1]]$outcomes
my_table <- do.call(rbind, outcomes)
return(my_table)
})
View(test)
test <- lapply(bookmakers, function(x){
outcomes <- x$markets[[1]]$outcomes
my_table <- do.call(cbind, outcomes)
return(my_table)
})
View(test)
my_table <- outcomes
test <- lapply(bookmakers, function(x){
outcomes <- x$markets[[1]]$outcomes
my_table <- outcomes
return(my_table)
})
outcomes[[1]]
test[[1]]
View(fromJSON(test[[1]]))
df <- data.frame(matrix(unlist(test[[1]]), nrow=length(test[[1]]), byrow=TRUE))
View(df)
test <- lapply(bookmakers, function(x){
outcomes <- x$markets[[1]]$outcomes
df <- data.frame(matrix(unlist(outcomes), nrow=length(outcomes), byrow=TRUE))
return(df)
})
View(test)
bookmakers[[1]]
bookmakers[[1]]$key
test <- lapply(bookmakers, function(x){
house= x$key
outcomes <- x$markets[[1]]$outcomes
df <- data.frame(matrix(unlist(outcomes), nrow=length(outcomes), byrow=TRUE))
return(df)
})
View(test)
test <- lapply(bookmakers, function(x){
house= x$key
print(house)
outcomes <- x$markets[[1]]$outcomes
df <- data.frame(matrix(unlist(outcomes), nrow=length(outcomes), byrow=TRUE))
return(df)
})
View(test)
test <- lapply(bookmakers, function(x){
house= x$key
print(house)
outcomes <- x$markets[[1]]$outcomes
df <- data.frame(matrix(unlist(outcomes), nrow=length(outcomes), byrow=TRUE))
names(df) <- c("team", house)
return(df)
})
View(test)
plyr::join_all(test)
#url to request oods
wc_url <- glue("https://api.the-odds-api.com/v4/sports/soccer_fifa_world_cup_winner/odds/?apiKey=324654c6d22a577030fead8bed15fc9d&regions=us")
wc <- GET(wc_url)
response <- content(wc)
View(response)
wc_url
bookmarks <- response[[1]]$bookmakers
list_odds <- lapply(bookmakers, function(x){
house= x$key
print(house)
outcomes <- x$markets[[1]]$outcomes
df <- data.frame(matrix(unlist(outcomes), nrow=length(outcomes), byrow=TRUE))
names(df) <- c("team", house)
return(df)
})
all_ods <- plyr::join_all(list_odds)
View(all_ods)
#look up table to clean countries
look_up <- import("data/1.lookups/teams_urls.csv") %>% select(team, id)
setdiff(all_ods$team, look_up$team)
View(look_up)
#join all odds
all_ods <- plyr::join_all(list_odds) %>%
mutate(team == case_when(team == "USA" ~ "United States",
team == "Iran" ~ "IR Iran",
team == "South Korea" ~ "Korea Republic")
)
setdiff(all_ods$team, look_up$team)
View(look_up)
#join all odds
all_ods <- plyr::join_all(list_odds) %>%
mutate(team == case_when(team == "USA" ~ "United States",
team == "Iran" ~ "IR Iran",
team == "South Korea" ~ "Korea Republic",
T ~ team)
)
#join all odds
all_ods <- plyr::join_all(list_odds) %>%
mutate(team = as.character(team),
team == case_when(team == "USA" ~ "United States",
team == "Iran" ~ "IR Iran",
team == "South Korea" ~ "Korea Republic",
T ~ team)
)
all_ods <- all_ods %>%
mutate(team = as.character(team),
team == case_when(team == "USA" ~ "United States",
team == "Iran" ~ "IR Iran",
team == "South Korea" ~ "Korea Republic",
T ~ team)
)
all_ods <- all_ods %>%
mutate(team = as.character(team),
team = case_when(team == "USA" ~ "United States",
team == "Iran" ~ "IR Iran",
team == "South Korea" ~ "Korea Republic",
T ~ team)
)
#join all odds
all_ods <- plyr::join_all(list_odds) %>%
mutate(team = as.character(team),
team = case_when(team == "USA" ~ "United States",
team == "Iran" ~ "IR Iran",
team == "South Korea" ~ "Korea Republic",
T ~ team)
)
library(tidyr)
sum_ods <- all_ods %>%
pivot_longer(-team)
View(sum_ods)
sum_ods <- all_ods %>%
pivot_longer(-team) %>%
group_by(team) %>%
summarise(odd_win = mean(value))
sum_ods <- all_ods %>%
pivot_longer(-team) %>%
group_by(team) %>%
summarise(odd_win = mean(as.numeric(value)))
sum_ods <- all_ods %>%
pivot_longer(-team) %>%
group_by(team) %>%
summarise(odd_win = mean(as.numeric(value)), .groups = 'drop') %>%
arrange(odd_win)
exfile <- 'data/3.clean/ind_ods_winner.csv'
export(sum_ods, exfile)
#Download oods to win the World Cup --------------------------------------------
source("R_/request_odds.R", encoding = "UTF-8")
#join all odds
all_ods <- plyr::join_all(list_odds, by = "team") %>%
mutate(team = as.character(team),
team = case_when(team == "USA" ~ "United States",
team == "Iran" ~ "IR Iran",
team == "South Korea" ~ "Korea Republic",
T ~ team)
)
#Daily flow
library(dplyr)
library(httr)
library(rio)
library(rvest)
library(tibble)
library(tidyr)
#Scrap the world cup matches --------------------------------------------------
source("R_/fbref_matches/2.Scrap_WC_games.R", encoding = "UTF-8")
#Clean matches ------------------------------------------------------------------
#Create tables "ind_all_matches.csv" that contains all the matches played since 2012 and to be played until the end of the WC
#ind_teams_year.csv" that contains the summary stats of each country since 2012
source("R_/fbref_matches/3.create_indicators.R", encoding = "UTF-8")
#Download oods to win the World Cup --------------------------------------------
source("R_/request_odds.R", encoding = "UTF-8")
#Download oods to win the World Cup --------------------------------------------
source("R_/request_odds.R", encoding = "UTF-8")
