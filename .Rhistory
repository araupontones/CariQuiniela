.groups = 'drop'
)
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date) %>%
filter(year >= 2010) %>%
group_by(team, quarter) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
group_by(team) %>%
mutate(prev_quarter = lag(quarter))
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date) %>%
filter(year >= 2010) %>%
group_by(team, quarter) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
group_by(team) %>%
mutate(prev_quarter = lag(quarter),
prev_rank = lag(rank)
)
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date) %>%
filter(year >= 2010) %>%
group_by(team, quarter) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
)
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date) %>%
filter(year >= 2010) %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
)
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date) %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
) %>%
filter(year >= 2010)
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date) %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
) %>%
filter(year > 2010)
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date) %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
)
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date) %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
)%>%
filter(year > 2010)
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date) %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
)%>%
filter(year > 2010) %>%
ungroup()
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date) %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
)%>%
filter(year > 2010) %>%
ungroup() %>%
filter(quarter == "2022.4")
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date) %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
)%>%
filter(year > 2010) %>%
ungroup() %>%
filter(quarter == "2022.4") %>%
arrange(quarter, rank)
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date) %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
)
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date) %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
)
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date) %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
)
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date) %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
) %>%
filter(year > 2010) %>%
ungroup()
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date) %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
#get the previous quarter but keep
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
) %>%
filter(year > 2010) %>%
ungroup()
wc_rankings <- rankings %>%
rename(team)
wc_rankings <- rankings %>%
rename(team = country_full)
names(wc_rankings)
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date)
rankings_quarters <- rankings_clean %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
#get the previous quarter but keep
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
) %>%
filter(year > 2010) %>%
ungroup()
#get all rankings before the WC
rankings_quarters <- rankings_clean %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
#get the previous quarter but keep
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
) %>%
filter(year > 2010) %>%
ungroup()
wc_rankings <- rankings_clean
rename(team = country_full) %>%
names(wc_rankings)
wc_rankings <- rankings_clean
names(wc_rankings)
wc_rankings <- rankings_clean %>%
filter(Date == "2022-10-06")
wc_rankings <- rankings_clean %>%
filter(Date == "2022-10-06") %>%
mutate(quarter == "WC")
View(wc_rankings)
wc_rankings <- rankings_clean %>%
filter(Date == "2022-10-06") %>%
mutate(quarter = "WC")
View(wc_rankings)
wc_rankings <- rankings_clean %>%
filter(Date == "2022-10-06") %>%
mutate(quarter = "WC") %>%
select(team, rank, total_points, previous_points, quarter)
all_rankings <- rbind(rankings_quarters, wc_rankings)
names(rankings_quarters)
wc_rankings <- rankings_clean %>%
filter(Date == "2022-10-06") %>%
mutate(quarter = "WC") %>%
select(team, rank, total_points, previous_points, quarter year)
wc_rankings <- rankings_clean %>%
filter(Date == "2022-10-06") %>%
mutate(quarter = "WC") %>%
select(team, rank, total_points, previous_points, quarter, year)
all_rankings <- rbind(rankings_quarters, wc_rankings)
#rankings for WC
wc_rankings <- rankings_clean %>%
filter(Date == "2022-10-06") %>%
mutate(quarter = "WC") %>%
select(team, rank, total_points, previous_points, quarter, year)
library(rio)
library(dplyr)
library(ggplot2)
exfile <- file.path("data/3.clean/fifa_rankings.csv")
lookup <- import("data/3.clean/ind_all_matches.csv", encoding = "UTF-8")
rankings <- rio::import("fifa_rankings/fifa_ranking-2022-10-06.csv", encoding = "UTF-8")
odds <- rio::import("data/3.clean/ind_ods_winner.csv") # to check correlation between ranking fifa and odds
#names of teams in lookup
locales <- unique(lookup$team)
visitantes <- unique(lookup$Opponent)
teams <- sort(unique(c(locales, visitantes)))
#clean rankings fifa ------------------------------------------------------------
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date)
#get all rankings before the WC
rankings_quarters <- rankings_clean %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
#get the previous quarter but keep
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
) %>%
filter(year > 2010) %>%
ungroup()
#rankings for WC
wc_rankings <- rankings_clean %>%
filter(Date == "2022-10-06") %>%
mutate(quarter = "WC") %>%
select(team, rank, total_points, previous_points, quarter, year)
#join rankings
all_rankings <- rbind(rankings_quarters, wc_rankings)
export(all_rankings, exfile)
library(rio)
library(dplyr)
library(ggplot2)
exfile <- file.path("data/3.clean/fifa_rankings.csv")
lookup <- import("data/3.clean/ind_all_matches.csv", encoding = "UTF-8")
rankings <- rio::import("fifa_rankings/fifa_ranking-2022-10-06.csv", encoding = "UTF-8")
odds <- rio::import("data/3.clean/ind_ods_winner.csv") # to check correlation between ranking fifa and odds
#names of teams in lookup
locales <- unique(lookup$team)
visitantes <- unique(lookup$Opponent)
teams <- sort(unique(c(locales, visitantes)))
#clean rankings fifa ------------------------------------------------------------
#clean names of countries and dates
rankings_clean <- rankings %>%
rename(team = country_full,
Date = rank_date) %>%
clean_teams(.,team ) %>%
create_quarter(., Date)
#get all rankings before the WC
rankings_quarters <- rankings_clean %>%
group_by(team, quarter, year) %>%
#create rankings by quarter to enable joining with all_maches
summarise(rank = mean(rank),
total_points = mean(total_points),
previous_points = mean(previous_points),
.groups = 'drop'
) %>%
#get the previous quarter but keep
group_by(team) %>%
mutate(across(c(rank, total_points, previous_points), function(x)lag(x))
) %>%
filter(year > 2010) %>%
ungroup()
#rankings for WC
wc_rankings <- rankings_clean %>%
filter(Date == "2022-10-06") %>%
mutate(quarter = "WC") %>%
select(team, rank, total_points, previous_points, quarter, year)
#join rankings
all_rankings <- rbind(rankings_quarters, wc_rankings)
export(all_rankings, exfile)
#check with odds
teams_fifa_clean <- sort(unique(rankings_clean$team))
setdiff(teams, teams_fifa_clean)
#check correlation with odds
last_ranking <- rankings_clean %>% dplyr::filter(quarter == "2022.4")
#
# data_plot <- odds %>%
#   arrange(odd_win) %>%
#   mutate(ranking_ods = row_number()) %>%
#   left_join(last_ranking)
#
# View(data_plot)
#
# #by odds
# data_plot %>%
#   ggplot(aes(x = ranking_ods,
#              y = rank,
#              label = team)) +
#   geom_point() +
#  geom_smooth()+
#   ggrepel::geom_text_repel() +
#   labs(x = "Rank Odds",
#        y = "Rank Fifa",
#        title = "Ranking odds vs Ranking Fifa")
#
#
# #by points
# #by odds
# data_plot %>%
#   ggplot(aes(x = odd_win,
#              y = total_points,
#              label = team)) +
#   geom_point() +
#   geom_smooth()+
#   ggrepel::geom_text_repel() +
#   labs(x = "odds to win",
#        y = "fifa points",
#        title = "Odds to win vs Total points FIFA")
message("Creating indicators and appending WC and  pre matches")
sistema <- Sys.info()['sysname']
exfile_matches <- file.path(dir_data, "3.clean/ind_all_matches.csv")
exfile_year_team <- file.path(dir_data, "3.clean/ind_teams_year.csv")
rankings_fifa <- import("https://raw.githubusercontent.com/araupontones/CariQuiniela/main/data/3.clean/fifa_rankings.csv")
#import intermediate data
if(sistema == "Windows"){
pre_wc <- rio::import(file.path(dir_data, "2.1.intermediate/matches_before_WC.rds"))
} else {
pre_wc <-rio::import("https://github.com/araupontones/CariQuiniela/blob/main/data/2.1.intermediate/matches_before_WC.rds?raw=true")
}
wc <-  import(file.path(dir_data, "2.1.intermediate/WC_matches.rds"))
#Create ind_all_matches.csv
all_matches <-  rbind(wc$scores, pre_wc$scores ) %>%
#get fifa ranks
mutate(Date = as.Date(Date)) %>%
arrange(desc(Date)) %>%
create_quarter(.,Date) %>%
mutate(quarter = ifelse(qatar, "WC", quarter))
#Create ind_all_matches.csv
all_matches <-  rbind(wc$scores, pre_wc$scores ) %>%
#get fifa ranks
mutate(Date = as.Date(Date)) %>%
arrange(desc(Date)) %>%
create_quarter(.,Date) %>%
mutate(quarter = ifelse(qatar, "WC", quarter)) %>%
get_rankings(., rankings_fifa) %>%
select(-c(month,quarter))
get_rankings <- function(.data, rankings){
rankings <- rankings %>% select(-year)
rankings$quarter <- as.character(rankings$quarter)
.data %>%
left_join(rankings, by = c("team", "quarter")) %>%
rename(local_fifa_rank = rank,
local_fifa_points = total_points,
local_fifa_prev_points =previous_points) %>%
left_join(rankings, by = c("Opponent"="team", "quarter")) %>%
rename(visitante_fifa_rank = rank,
visitante_fifa_points = total_points,
visitante_fifa_prev_points =previous_points)
}
#Create ind_all_matches.csv
all_matches <-  rbind(wc$scores, pre_wc$scores ) %>%
#get fifa ranks
mutate(Date = as.Date(Date)) %>%
arrange(desc(Date)) %>%
create_quarter(.,Date) %>%
mutate(quarter = ifelse(qatar, "WC", quarter)) %>%
get_rankings(., rankings_fifa) %>%
select(-c(month,quarter))
#Clean matches ------------------------------------------------------------------
#Create tables "ind_all_matches.csv" that contains all the matches played since 2012 and to be played until the end of the WC
#ind_teams_year.csv" that contains the summary stats of each country since 2012
source(file.path(dir_r, "Append_before_and_WC.R"), encoding = "UTF-8")
#Clean matches ------------------------------------------------------------------
#Create tables "ind_all_matches.csv" that contains all the matches played since 2012 and to be played until the end of the WC
#ind_teams_year.csv" that contains the summary stats of each country since 2012
source(file.path(dir_r, "Append_before_and_WC.R"), encoding = "UTF-8")
View(db_matches_unique)
