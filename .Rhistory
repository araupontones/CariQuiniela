my_table <- do.call(rbind, outcomes)
test <- lapply(bookmakers, function(x){
outcomes <- x$markets[[1]]$outcomes
my_table <- do.call(rbind, outcomes)
return(my_table)
})
View(test)
test <- lapply(bookmakers, function(x){
outcomes <- x$markets[[1]]$outcomes
my_table <- do.call(cbind, outcomes)
return(my_table)
})
View(test)
my_table <- outcomes
test <- lapply(bookmakers, function(x){
outcomes <- x$markets[[1]]$outcomes
my_table <- outcomes
return(my_table)
})
outcomes[[1]]
test[[1]]
View(fromJSON(test[[1]]))
df <- data.frame(matrix(unlist(test[[1]]), nrow=length(test[[1]]), byrow=TRUE))
View(df)
test <- lapply(bookmakers, function(x){
outcomes <- x$markets[[1]]$outcomes
df <- data.frame(matrix(unlist(outcomes), nrow=length(outcomes), byrow=TRUE))
return(df)
})
View(test)
bookmakers[[1]]
bookmakers[[1]]$key
test <- lapply(bookmakers, function(x){
house= x$key
outcomes <- x$markets[[1]]$outcomes
df <- data.frame(matrix(unlist(outcomes), nrow=length(outcomes), byrow=TRUE))
return(df)
})
View(test)
test <- lapply(bookmakers, function(x){
house= x$key
print(house)
outcomes <- x$markets[[1]]$outcomes
df <- data.frame(matrix(unlist(outcomes), nrow=length(outcomes), byrow=TRUE))
return(df)
})
View(test)
test <- lapply(bookmakers, function(x){
house= x$key
print(house)
outcomes <- x$markets[[1]]$outcomes
df <- data.frame(matrix(unlist(outcomes), nrow=length(outcomes), byrow=TRUE))
names(df) <- c("team", house)
return(df)
})
View(test)
plyr::join_all(test)
#url to request oods
wc_url <- glue("https://api.the-odds-api.com/v4/sports/soccer_fifa_world_cup_winner/odds/?apiKey=324654c6d22a577030fead8bed15fc9d&regions=us")
wc <- GET(wc_url)
response <- content(wc)
View(response)
wc_url
bookmarks <- response[[1]]$bookmakers
list_odds <- lapply(bookmakers, function(x){
house= x$key
print(house)
outcomes <- x$markets[[1]]$outcomes
df <- data.frame(matrix(unlist(outcomes), nrow=length(outcomes), byrow=TRUE))
names(df) <- c("team", house)
return(df)
})
all_ods <- plyr::join_all(list_odds)
View(all_ods)
#look up table to clean countries
look_up <- import("data/1.lookups/teams_urls.csv") %>% select(team, id)
setdiff(all_ods$team, look_up$team)
View(look_up)
#join all odds
all_ods <- plyr::join_all(list_odds) %>%
mutate(team == case_when(team == "USA" ~ "United States",
team == "Iran" ~ "IR Iran",
team == "South Korea" ~ "Korea Republic")
)
setdiff(all_ods$team, look_up$team)
View(look_up)
#join all odds
all_ods <- plyr::join_all(list_odds) %>%
mutate(team == case_when(team == "USA" ~ "United States",
team == "Iran" ~ "IR Iran",
team == "South Korea" ~ "Korea Republic",
T ~ team)
)
#join all odds
all_ods <- plyr::join_all(list_odds) %>%
mutate(team = as.character(team),
team == case_when(team == "USA" ~ "United States",
team == "Iran" ~ "IR Iran",
team == "South Korea" ~ "Korea Republic",
T ~ team)
)
all_ods <- all_ods %>%
mutate(team = as.character(team),
team == case_when(team == "USA" ~ "United States",
team == "Iran" ~ "IR Iran",
team == "South Korea" ~ "Korea Republic",
T ~ team)
)
all_ods <- all_ods %>%
mutate(team = as.character(team),
team = case_when(team == "USA" ~ "United States",
team == "Iran" ~ "IR Iran",
team == "South Korea" ~ "Korea Republic",
T ~ team)
)
#join all odds
all_ods <- plyr::join_all(list_odds) %>%
mutate(team = as.character(team),
team = case_when(team == "USA" ~ "United States",
team == "Iran" ~ "IR Iran",
team == "South Korea" ~ "Korea Republic",
T ~ team)
)
library(tidyr)
sum_ods <- all_ods %>%
pivot_longer(-team)
View(sum_ods)
sum_ods <- all_ods %>%
pivot_longer(-team) %>%
group_by(team) %>%
summarise(odd_win = mean(value))
sum_ods <- all_ods %>%
pivot_longer(-team) %>%
group_by(team) %>%
summarise(odd_win = mean(as.numeric(value)))
sum_ods <- all_ods %>%
pivot_longer(-team) %>%
group_by(team) %>%
summarise(odd_win = mean(as.numeric(value)), .groups = 'drop') %>%
arrange(odd_win)
exfile <- 'data/3.clean/ind_ods_winner.csv'
export(sum_ods, exfile)
#Download oods to win the World Cup --------------------------------------------
source("R_/request_odds.R", encoding = "UTF-8")
#join all odds
all_ods <- plyr::join_all(list_odds, by = "team") %>%
mutate(team = as.character(team),
team = case_when(team == "USA" ~ "United States",
team == "Iran" ~ "IR Iran",
team == "South Korea" ~ "Korea Republic",
T ~ team)
)
#Daily flow
library(dplyr)
library(httr)
library(rio)
library(rvest)
library(tibble)
library(tidyr)
#Scrap the world cup matches --------------------------------------------------
source("R_/fbref_matches/2.Scrap_WC_games.R", encoding = "UTF-8")
#Clean matches ------------------------------------------------------------------
#Create tables "ind_all_matches.csv" that contains all the matches played since 2012 and to be played until the end of the WC
#ind_teams_year.csv" that contains the summary stats of each country since 2012
source("R_/fbref_matches/3.create_indicators.R", encoding = "UTF-8")
#Download oods to win the World Cup --------------------------------------------
source("R_/request_odds.R", encoding = "UTF-8")
#Download oods to win the World Cup --------------------------------------------
source("R_/request_odds.R", encoding = "UTF-8")
old <- "https://raw.githubusercontent.com/araupontones/CariQuiniela/d76961fdf0b93df7c8e160889c939371beb54471/data/3.clean/ind_ods_winner.csv"
old_odds <- rio::import(old)
rio::export(old_odds, "data/3.clean/ind_ods_winner_OLD.csv")
new_ods <- rio::import("data/3.clean/ind_ods_winner.csv")
old_odds <- rio::import(old) %>%
mutate(type = "old")
library(dplyr)
library(ggplot2)
old_odds <- rio::import(old) %>%
mutate(type = "old")
new_ods <- rio::import("data/3.clean/ind_ods_winner.csv")
all_ods <- old_odds %>%
left_join(new_ods, suffix = c("old", "new"))
View(all_ods)
all_ods <- old_odds %>%
left_join(new_ods, by = "team")
View(all_ods)
old_odds <- rio::import(old)
new_ods <- rio::import("data/3.clean/ind_ods_winner.csv")
all_ods <- old_odds %>%
left_join(new_ods, by = "team")
View(all_ods)
all_ods <- old_odds %>%
left_join(new_ods, by = "team",suffix = c("a", "B"))
all_ods <- old_odds %>%
left_join(new_ods, by = "team",suffix = c("_old", "_new"))
all_ods <- old_odds %>%
left_join(new_ods, by = "team",suffix = c("_old", "_new")) %>%
rename_at(vars(starts_with("odd_")), function(x)paste("a",x))
all_ods <- old_odds %>%
left_join(new_ods, by = "team",suffix = c("_old", "_new")) %>%
rename_at(vars(starts_with("odd_")), function(x)stringr::str_remove(x,"odd_win_"))
library(tidyr)
all_ods <- old_odds %>%
left_join(new_ods, by = "team",suffix = c("_old", "_new")) %>%
rename_at(vars(starts_with("odd_")), function(x)stringr::str_remove(x,"odd_win_")) %>%
pivot_longer(-team,
names_to = "when",
values_to = "odd")
library(forcats)
all_ods <- old_odds %>%
left_join(new_ods, by = "team",suffix = c("_old", "_new")) %>%
rename_at(vars(starts_with("odd_")), function(x)stringr::str_remove(x,"odd_win_")) %>%
pivot_longer(-team,
names_to = "when",
values_to = "odd") %>%
mutate(team = fct_reorder(team, odd) )
ggplot(all_ods,
aes(x = odd,
y = team,
fill = when
)
) +
geom_col(stat = "dodge")
all_ods <- old_odds %>%
left_join(new_ods, by = "team",suffix = c("_old", "_new")) %>%
rename_at(vars(starts_with("odd_")), function(x)stringr::str_remove(x,"odd_win_")) %>%
pivot_longer(-team,
names_to = "when",
values_to = "odd") %>%
mutate(porb = 1/odd,
team = fct_reorder(team, prob))
all_ods <- old_odds %>%
left_join(new_ods, by = "team",suffix = c("_old", "_new")) %>%
rename_at(vars(starts_with("odd_")), function(x)stringr::str_remove(x,"odd_win_")) %>%
pivot_longer(-team,
names_to = "when",
values_to = "odd") %>%
mutate(prob = 1/odd,
team = fct_reorder(team, prob))
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
geom_col(stat = "dodge")
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
geom_col(position = "dodge")
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
geom_col(position = "dodge") +
theme(legend.position = 'top')
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
geom_col(position = "dodge") +
theme(legend.position = 'top',
axis.ticks = element_blank()
)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
geom_col(position = "dodge") +
theme(legend.position = 'top',
axis.ticks = element_blank(),
axis.text.y = element_text(hjust = 1)
)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
geom_col(position = "dodge") +
theme(legend.position = 'top',
axis.ticks = element_blank(),
axis.text.y = element_text(hjust = 0)
)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
expand(0,0)+
geom_col(position = "dodge") +
theme(legend.position = 'top',
axis.ticks = element_blank(),
axis.text.y = element_text(hjust = 0)
)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
expand_limits(x = 0)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
expand_limits(y = 0)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
geom_col(position = "dodge") +
theme(legend.position = 'top',
axis.ticks = element_blank(),
axis.text.y = element_text(hjust = 0)
)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
expand_limits(x = 0, y = 0)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
scale_x_continuous(expand = c(0,0))
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
scale_y_continuous(expand = c(0,0))
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
scale_y_continuous(expand = c(0,1))
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
scale_x_continuous(expand = c(0,1))
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
geom_col(position = "dodge") +
theme(legend.position = 'top',
axis.ticks = element_blank(),
axis.text.y = element_text(hjust = 0)
)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
labs(x = "",
y = "Prob") +
geom_col(position = "dodge") +
theme(legend.position = 'top',
axis.ticks = element_blank(),
axis.text.y = element_text(hjust = 0)
)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
labs(y = "",
x = "Prob") +
geom_col(position = "dodge") +
theme(legend.position = 'top',
axis.ticks = element_blank(),
axis.text.y = element_text(hjust = 0)
)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
labs(y = "",
x = "Prob") +
geom_col(position = "dodge") +
theme(legend.position = 'top',
axis.ticks = element_blank(),
axis.text.y = element_text(hjust = 0),
plot.background = element_blank()
)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
labs(y = "",
x = "Prob") +
geom_col(position = "dodge") +
theme(legend.position = 'top',
axis.ticks = element_blank(),
axis.text.y = element_text(hjust = 0),
plot.background = element_blank(),
panel.background = element_blank(),
)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
labs(y = "",
x = "Prob") +
geom_col(position = "dodge") +
theme(legend.position = 'top',
axis.ticks = element_blank(),
axis.text.y = element_text(hjust = 0),
plot.background = element_blank(),
panel.background = element_blank(),
panel.grid.major.x = element_line(linetype = "dotted")
)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
labs(y = "",
x = "Prob") +
geom_col(position = "dodge") +
theme(legend.position = 'top',
axis.ticks = element_blank(),
axis.text.y = element_text(hjust = 0),
plot.background = element_blank(),
panel.background = element_blank(),
panel.grid.major.y = element_line(linetype = "dotted")
)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
labs(y = "",
x = "Prob") +
geom_col(position = "dodge") +
theme(legend.position = 'top',
axis.ticks = element_blank(),
axis.text.y = element_text(hjust = 0),
plot.background = element_blank(),
panel.background = element_blank(),
panel.grid.major.y = element_line(linetype = "dotted", color = "black")
)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
labs(y = "",
x = "Prob") +
geom_col(position = "dodge") +
theme(legend.position = 'top',
axis.ticks = element_blank(),
axis.text.y = element_text(hjust = 0),
plot.background = element_blank(),
panel.background = element_blank(),
panel.grid.major.x = element_line(linetype = "dotted", color = "black")
)
ggplot(all_ods,
aes(x = prob,
y = team,
fill = when
)
) +
labs(y = "",
x = "Prob") +
geom_col(position = "dodge") +
theme(legend.position = 'top',
axis.ticks = element_blank(),
axis.text.y = element_text(hjust = 0),
plot.background = element_blank(),
panel.background = element_blank(),
panel.grid.major.x = element_line(linetype = "dotted", color = "black"),
panel.grid.minor.x = element_line(linetype = "dotted", color = "black")
)
