arrange(id_match) %>%
mutate(Venue = ifelse(is.na(id_opponent) & Venue == "Away", "awayNoWC", Venue)) %>%
#only keep home and neutral matches to capture goles local and goles visitante
filter(Venue %in% c("Home", "Neutral", "awayNoWC")) %>%
slice(1) %>%
#correct for teams that are not going to the WC
mutate(bucket = team,
team = ifelse(Venue == "awayNoWC", Opponent, team),
Opponent = ifelse(Venue == "awayNoWC", bucket, Opponent),
goles_local = case_when(Venue == "awayNoWC" ~ GA,
T ~ GF),
goles_visitante = case_when(Venue == "awayNoWC" ~ GF,
T ~ GA),
neutral = Venue == "Neutral",
.after = "GA"
) %>%
select(-bucket) %>%
ungroup() %>%
select(-c(Venue, Result, GF, GA, starts_with("id_"))) %>%
arrange(desc(Date))  %>%
select(year, team, Opponent, Date, goles_local, goles_visitante, qatar) %>%
rbind(wc$scores)
names(wc$scores)
#unique matches in format local visitante
scores_matches <- do.call(rbind, transforma) %>%
clean_teams() %>%
mutate(across(starts_with("goles"), function(x)as.numeric(x)),
year = stringr::str_sub(Date, 1,4))
#locales
locals <- scores_matches %>%
mutate(GF = goles_local,
GA = goles_visitate,
Result = case_when(is.na(goles_local) ~ NA_character_,
GF > GA ~ "W",
GF < GA ~ "L",
GF == GA ~ "D"
)
)
#visitantes -----------------------------------------------------------------
visitantes <- scores_matches %>%
mutate(bucket = Opponent,
Opponent = team,
team = bucket,
GF = goles_visitate,
GA = goles_local,
Result = case_when(is.na(goles_local) ~ NA_character_,
GF > GA ~ "W",
GF < GA ~ "L",
GF == GA ~ "D"
)
) %>%
select(-bucket)
#matches by team -------------------------------------------------------------
matches_by_team <- rbind(locals, visitantes) %>%
mutate(Comp = "WC",
Venue = "Neutral"
) %>%
select(-starts_with("goles")) %>%
create_ids(., look_up)
world_cup_matches <- list(scores_matches, matches_by_team)
names(world_cup_matches) <- c("scores", "by_team")
export(world_cup_matches, exfile)
names(world_cup_matches) <- c("scores", "by_team")
export(world_cup_matches, exfile)
#to request scores of WC. Clean on day 1 of tournament
look_up <- import(file.path(dir_data,"1.lookups/teams_urls.csv")) %>% select(team, id)
exfile <- file.path(dir_data, "2.scrapped/WC_matches.rds")
scores <- "https://api.the-odds-api.com/v4/sports/soccer_fifa_world_cup/scores/?daysFrom=1&apiKey=324654c6d22a577030fead8bed15fc9d"
sc <- GET(scores)
r_s <- content(sc)
transforma <- lapply(r_s, function(m){
match_data <-tibble(team = m$home_team,
Opponent = m$away_team,
Date = stringr::str_sub(m$commence_time, 1,10),
Venue = "Neutral",
qatar = TRUE)
#if the match has not been completed
if(!m$completed){
match_data$goles_local = NA
match_data$goles_visitate = NA
} else {
match_data$goles_local = m$scores[[1]]$score
match_data$goles_visitate = m$scores[[2]]$score
}
return(match_data)
})
#unique matches in format local visitante
scores_matches <- do.call(rbind, transforma) %>%
clean_teams() %>%
mutate(across(starts_with("goles"), function(x)as.numeric(x)),
year = stringr::str_sub(Date, 1,4))
#create table to get GF and GA for all teams-------------------------------------
#start with local teams
#locales
locals <- scores_matches %>%
mutate(GF = goles_local,
GA = goles_visitate,
Result = case_when(is.na(goles_local) ~ NA_character_,
GF > GA ~ "W",
GF < GA ~ "L",
GF == GA ~ "D"
)
)
#visitantes -----------------------------------------------------------------
visitantes <- scores_matches %>%
mutate(bucket = Opponent,
Opponent = team,
team = bucket,
GF = goles_visitate,
GA = goles_local,
Result = case_when(is.na(goles_local) ~ NA_character_,
GF > GA ~ "W",
GF < GA ~ "L",
GF == GA ~ "D"
)
) %>%
select(-bucket)
#matches by team -------------------------------------------------------------
matches_by_team <- rbind(locals, visitantes) %>%
mutate(Comp = "WC",
Venue = "Neutral"
) %>%
select(-starts_with("goles")) %>%
create_ids(., look_up)
world_cup_matches <- list(scores_matches, matches_by_team)
names(world_cup_matches) <- c("scores", "by_team")
export(world_cup_matches, exfile)
#clean and create indicators
library(dplyr)
library(tidyr)
library(rio)
library(stringr)
library(janitor)
message("Cleaning matches played  before WC.....")
indir <- file.path(dir_data,"2.scrapped/fbref")
#all_competitions.csv is created in R_/scrap_games_teams.R
infile_all <- file.path(indir,"matches_before_2022.csv")
infile_2022 <-  file.path(indir,"matches_2022_before_WC.csv")
infile_WC <- file.path(dir_data, "2.scrapped/WC_matches.rds")
look_up <- import(file.path(dir_data,"1.lookups/teams_urls.csv")) %>% select(team, id)
#Exit paths ---------------------------------------------------------------------
exdir <- file.path(dir_data,"3.clean")
exfile_matches <- file.path(exdir, "ind_all_matches.csv")
exfile_year_team <-file.path(exdir, "ind_teams_year.csv")
#read scrapped data ----------------------------------------------------------
before_2022 <- import(infile_all) %>% mutate(qatar = FALSE)  %>% filter(GF != "", !is.na(Date))
during_2022<- import(infile_2022)
wc <- import(infile_WC)
#Clean table of all matches & define year variable ---------------------------
db_matches <- before_2022 %>%
#bind with matches of 2022 previous WC
plyr::rbind.fill(during_2022) %>%
#drop penalties in drawn matches, penalties are reported within parenthesis.
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4),
#remove iso2 and iso 3 from Opponent's name
Opponent = str_remove(Opponent, "^[a-z][a-z] "),
Opponent = str_remove(Opponent, "^[a-z][a-z][a-z] ")
) %>%
select(year, team, Opponent, Date, Comp, Venue, Result, GF, GA, qatar) %>%
#remove duplicates (there were some duplicated matches while scrapping)
distinct() %>%
#id match
create_ids(., look_up) %>%
ungroup() %>%
#join with world cup matches
rbind(wc$by_team)
#transform matches as local vs visitante format ------------------------------
#this is the data to be exported
db_matches_unique <- db_matches %>%
filter(!qatar) %>%
group_by(id_match) %>%
arrange(id_match) %>%
mutate(Venue = ifelse(is.na(id_opponent) & Venue == "Away", "awayNoWC", Venue)) %>%
#only keep home and neutral matches to capture goles local and goles visitante
filter(Venue %in% c("Home", "Neutral", "awayNoWC")) %>%
slice(1) %>%
#correct for teams that are not going to the WC
mutate(bucket = team,
team = ifelse(Venue == "awayNoWC", Opponent, team),
Opponent = ifelse(Venue == "awayNoWC", bucket, Opponent),
goles_local = case_when(Venue == "awayNoWC" ~ GA,
T ~ GF),
goles_visitante = case_when(Venue == "awayNoWC" ~ GF,
T ~ GA),
neutral = Venue == "Neutral",
.after = "GA"
) %>%
select(-bucket) %>%
ungroup() %>%
select(-c(Venue, Result, GF, GA, starts_with("id_"))) %>%
arrange(desc(Date))  %>%
select(year, team, Opponent, Date, goles_local, goles_visitante, qatar) %>%
rbind(wc$scores)
names(db_matches_unique)
names(wc$scores)
#unique matches in format local visitante
scores_matches <- do.call(rbind, transforma) %>%
clean_teams() %>%
mutate(across(starts_with("goles"), function(x)as.numeric(x)),
year = stringr::str_sub(Date, 1,4)) %>%
select(year, team, Opponent, Date, goles_local, goles_visitante, qatar)
#unique matches in format local visitante
scores_matches <- do.call(rbind, transforma) %>%
clean_teams() %>%
mutate(across(starts_with("goles"), function(x)as.numeric(x)),
year = stringr::str_sub(Date, 1,4))
names(scores_matches)
transforma <- lapply(r_s, function(m){
match_data <-tibble(team = m$home_team,
Opponent = m$away_team,
Date = stringr::str_sub(m$commence_time, 1,10),
Venue = "Neutral",
qatar = TRUE)
#if the match has not been completed
if(!m$completed){
match_data$goles_local = NA
match_data$goles_visitante = NA
} else {
match_data$goles_local = m$scores[[1]]$score
match_data$goles_visitante = m$scores[[2]]$score
}
return(match_data)
})
#unique matches in format local visitante
scores_matches <- do.call(rbind, transforma) %>%
clean_teams() %>%
mutate(across(starts_with("goles"), function(x)as.numeric(x)),
year = stringr::str_sub(Date, 1,4)) %>%
select(year, team, Opponent, Date, goles_local, goles_visitante, qatar)
#to request scores of WC. Clean on day 1 of tournament
look_up <- import(file.path(dir_data,"1.lookups/teams_urls.csv")) %>% select(team, id)
exfile <- file.path(dir_data, "2.scrapped/WC_matches.rds")
scores <- "https://api.the-odds-api.com/v4/sports/soccer_fifa_world_cup/scores/?daysFrom=1&apiKey=324654c6d22a577030fead8bed15fc9d"
sc <- GET(scores)
r_s <- content(sc)
transforma <- lapply(r_s, function(m){
match_data <-tibble(team = m$home_team,
Opponent = m$away_team,
Date = stringr::str_sub(m$commence_time, 1,10),
Venue = "Neutral",
qatar = TRUE)
#if the match has not been completed
if(!m$completed){
match_data$goles_local = NA
match_data$goles_visitante = NA
} else {
match_data$goles_local = m$scores[[1]]$score
match_data$goles_visitante = m$scores[[2]]$score
}
return(match_data)
})
#unique matches in format local visitante
scores_matches <- do.call(rbind, transforma) %>%
clean_teams() %>%
mutate(across(starts_with("goles"), function(x)as.numeric(x)),
year = stringr::str_sub(Date, 1,4)) %>%
select(year, team, Opponent, Date, goles_local, goles_visitante, qatar)
#create table to get GF and GA for all teams-------------------------------------
#start with local teams
#locales
locals <- scores_matches %>%
mutate(GF = goles_local,
GA = goles_visitante,
Result = case_when(is.na(goles_local) ~ NA_character_,
GF > GA ~ "W",
GF < GA ~ "L",
GF == GA ~ "D"
)
)
#visitantes -----------------------------------------------------------------
visitantes <- scores_matches %>%
mutate(bucket = Opponent,
Opponent = team,
team = bucket,
GF = goles_visitante,
GA = goles_local,
Result = case_when(is.na(goles_local) ~ NA_character_,
GF > GA ~ "W",
GF < GA ~ "L",
GF == GA ~ "D"
)
) %>%
select(-bucket)
#matches by team -------------------------------------------------------------
matches_by_team <- rbind(locals, visitantes) %>%
mutate(Comp = "WC",
Venue = "Neutral"
) %>%
select(-starts_with("goles")) %>%
create_ids(., look_up)
world_cup_matches <- list(scores_matches, matches_by_team)
names(world_cup_matches) <- c("scores", "by_team")
export(world_cup_matches, exfile)
#clean and create indicators
library(dplyr)
library(tidyr)
library(rio)
library(stringr)
library(janitor)
message("Cleaning matches played  before WC.....")
indir <- file.path(dir_data,"2.scrapped/fbref")
#all_competitions.csv is created in R_/scrap_games_teams.R
infile_all <- file.path(indir,"matches_before_2022.csv")
infile_2022 <-  file.path(indir,"matches_2022_before_WC.csv")
infile_WC <- file.path(dir_data, "2.scrapped/WC_matches.rds")
look_up <- import(file.path(dir_data,"1.lookups/teams_urls.csv")) %>% select(team, id)
#Exit paths ---------------------------------------------------------------------
exdir <- file.path(dir_data,"3.clean")
exfile_matches <- file.path(exdir, "ind_all_matches.csv")
exfile_year_team <-file.path(exdir, "ind_teams_year.csv")
#read scrapped data ----------------------------------------------------------
before_2022 <- import(infile_all) %>% mutate(qatar = FALSE)  %>% filter(GF != "", !is.na(Date))
during_2022<- import(infile_2022)
wc <- import(infile_WC)
#Clean table of all matches & define year variable ---------------------------
db_matches <- before_2022 %>%
#bind with matches of 2022 previous WC
plyr::rbind.fill(during_2022) %>%
#drop penalties in drawn matches, penalties are reported within parenthesis.
mutate(across(c(GF, GA) , function(x) as.numeric(str_replace(x, "\\([0-9]\\)",""))),
year = str_sub(Date,1,4),
#remove iso2 and iso 3 from Opponent's name
Opponent = str_remove(Opponent, "^[a-z][a-z] "),
Opponent = str_remove(Opponent, "^[a-z][a-z][a-z] ")
) %>%
select(year, team, Opponent, Date, Comp, Venue, Result, GF, GA, qatar) %>%
#remove duplicates (there were some duplicated matches while scrapping)
distinct() %>%
#id match
create_ids(., look_up) %>%
ungroup() %>%
#join with world cup matches
rbind(wc$by_team)
#transform matches as local vs visitante format ------------------------------
#this is the data to be exported
db_matches_unique <- db_matches %>%
filter(!qatar) %>%
group_by(id_match) %>%
arrange(id_match) %>%
mutate(Venue = ifelse(is.na(id_opponent) & Venue == "Away", "awayNoWC", Venue)) %>%
#only keep home and neutral matches to capture goles local and goles visitante
filter(Venue %in% c("Home", "Neutral", "awayNoWC")) %>%
slice(1) %>%
#correct for teams that are not going to the WC
mutate(bucket = team,
team = ifelse(Venue == "awayNoWC", Opponent, team),
Opponent = ifelse(Venue == "awayNoWC", bucket, Opponent),
goles_local = case_when(Venue == "awayNoWC" ~ GA,
T ~ GF),
goles_visitante = case_when(Venue == "awayNoWC" ~ GF,
T ~ GA),
neutral = Venue == "Neutral",
.after = "GA"
) %>%
select(-bucket) %>%
ungroup() %>%
select(-c(Venue, Result, GF, GA, starts_with("id_"))) %>%
arrange(desc(Date))  %>%
select(year, team, Opponent, Date, goles_local, goles_visitante, qatar) %>%
rbind(wc$scores)
View(db_matches_unique)
#Request WC matches odds ------------------------------------------------------
library(jsonlite)
message("downloading WC odds matches....")
exfile = file.path(dir_data, "3.clean/WC_matches_odds.csv")
look_up <- import(file.path(dir_data,"1.lookups/teams_urls.csv")) %>% select(team, id)
#Request matches-------------------------------------------------------------
wc <- "https://api.the-odds-api.com/v4/sports/soccer_fifa_world_cup/odds/?regions=us&oddsFormat=american&apiKey=324654c6d22a577030fead8bed15fc9d"
w <- GET(wc)
rsp_w <- content(w)
#Unlist all information from the response
test <- lapply(rsp_w, function(x){
#match info
date = x$commence_time
#get bookmakers (the odds for all the bet houses)
books <- x$bookmakers
#Each book has an odd for the match
markets <- lapply(books, function(b){
#using this to avoid duplicates when iterating and transforming into a database
name = b$key
return(list(name = name, b =b$markets ))
})
#let's get all the odds for all the markets
odds <- lapply(markets, function(m){
mercado = (m$name)
outcomes <- lapply(m$b, function(o){
tibble(
team = o$outcomes[[1]]$name,
"local_odd_{mercado}" := o$outcomes[[1]]$price,
Opponent = o$outcomes[[2]]$name,
"visitante_odd_{mercado}":= o$outcomes[[2]]$price,
"empate_{mercado}" := o$outcomes[[3]]$price,
Date = date
)
})
#join all odds for this match
plyr::join_all(outcomes, by = c("team", "Opponent", "Date"))
})
#join all odds for all matches
odds_2 <- plyr::join_all(odds, by = c("team", "Opponent", "Date"))
return(odds_2)
})
#bind all the matches into a single table
matches_raw <- do.call(plyr::rbind.fill, test)
#create average of odds ------------------------------------------------------
matches_clean <- matches_raw %>%
rowwise() %>%
mutate(local = mean(c_across(starts_with("local_odd")), na.rm = T),
visitante = mean(c_across(starts_with("visitante_odd")), na.rm = T),
empate = mean(c_across(starts_with("empate")), na.rm = T),
.after = Opponent
) %>%
ungroup()%>%
mutate(Date = stringr::str_sub(Date,1,10)) %>%
select(-contains("_")) %>%
clean_teams() %>%
create_ids(., look_up)
rio::export(matches_clean, exfile)
message("WC odds matches downladed")
View(matches_clean)
crate_url <- function(year){glue('https://www.oddsportal.com/soccer/world/world-cup-{year}/results/')}
create_url <- function(year){glue('https://www.oddsportal.com/soccer/world/world-cup-{year}/results/')}
url <- create_url(2014)
# odds previous EC
library(glue)
create_url <- function(year){glue('https://www.oddsportal.com/soccer/world/world-cup-{year}/results/')}
url <- create_url(2014)
url
website <- GET(url)
library(rvest)
table <- website %>%
rvest::html_attrs('#tournamentTable')
table <- website %>%
rvest::html_attr('#tournamentTable')
website <- rvest::read_html(url)
table <- website %>%
rvest::html_attr('#tournamentTable')
table <- website %>%
rvest::html_attr('#tournamentTable')
# odds previous EC
library(glue)
library(rvest)
create_url <- function(year){glue('https://www.oddsportal.com/soccer/world/world-cup-{year}/results/')}
url <- create_url(2014)
url
website <- rvest::read_html(url)
table <- website %>%
rvest::html_attr('#tournamentTable')
table <- website %>%
rvest::html_attrs('#tournamentTable')
website <- rvest::read_html(url)
table <- website %>%
rvest::html_attrs('#tournamentTable')
table <- website %>%
rvest::html_attr('#tournamentTable')
table <- website %>%
rvest::html_attr('#tournamentTable')
table <- website %>%
rvest::html_element('#tournamentTable')
table
table[[1]]
table[[1]] %>% html_table()
table[[2]] %>% html_table()
View(table)
table <- website
website <- rvest::read_html(url)
View(website)
table <- website %>%
rvest::html_element('table')
table <- website %>%
rvest::html_element('table')
View(table)
table$doc
table$node
table <- website %>%
rvest::html_element('.table-main')
table <- website %>%
rvest::html_element('.table-main') %>%
html_table()
View(table)
table <- website %>%
rvest::html_element('#tournamentTable') %>%
html_table()
table <- website %>%
rvest::html_element('#tournamentTable')
table <- website %>%
rvest::html_element('#tournamentTable') %>%
html_table()
table <- website %>%
rvest::html_element('#tournamentTable') %>%
.[[1]] %>%
html_table()
table <- website %>%
rvest::html_elements('td')
View(table)
create_url <- function(year){glue('https://www.oddsportal.com/soccer/world/world-cup-{year}/results/#')}
create_url <- function(year){glue('https://www.oddsportal.com/soccer/world/world-cup-{year}/results/#')}
url <- create_url(2014)
website <- rvest::read_html(url)
table <- website %>%
rvest::html_elements('td')
table <- website %>%
rvest::html_elements('#tournamentTable')
View(table)
table <- website %>%
rvest::html_elements('#tournamentTable') %>%
.[[1]] %>%
html_table()
table <- website %>%
rvest::html_elements('#tournamentTable') %>%
html_table()
